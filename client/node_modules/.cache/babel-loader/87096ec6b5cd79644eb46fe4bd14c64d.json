{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n\n        if (item.value !== undefined) {\n          return true;\n        }\n\n        const column = apiRef.current.getColumn(item.columnField);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operatorValue);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.filterModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null || // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"names":["_extends","React","GridFeatureModeConstant","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","gridVisibleSortedRowEntriesSelector","useFirstRender","gridRowIdsSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","passFilterLogic","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$initialState3","_props$initialState3$","_props$componentsProp2","logger","current","unstable_registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","client","filteringResult","unstable_applyStrategyProcessor","publishEvent","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","_column$filterOperato","value","undefined","column","getColumn","columnField","filterOperator","filterOperators","find","operator","operatorValue","requiresFilterValue","newFilterItems","filterItemOnTarget","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLinkOperator","linkOperator","setQuickFilterValues","values","quickFilterValues","model","reason","currentModel","unstable_updateControlState","unstable_applyFilters","getVisibleRowModels","visibleSortedRows","Map","map","row","filterApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","filterModelToExport","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$componentsProp","FilterPanel","components","componentsProps","filterPanel","flatFilteringMethod","rowIds","filteredRowsLookup","i","rowId","isRowPassing","startsWith","passingFilterItems","passingQuickFilterValues","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridFeatureModeConstant } from '../../../models/gridFeatureMode';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector, gridVisibleSortedRowEntriesSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { gridRowIdsSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.unstable_registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === GridFeatureModeConstant.client ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.unstable_applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n\n        if (item.value !== undefined) {\n          return true;\n        }\n\n        const column = apiRef.current.getColumn(item.columnField);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operatorValue);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.columnField === targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          columnField: targetColumnField\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLinkOperator = React.useCallback(linkOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.linkOperator === linkOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      linkOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getVisibleRowModels = React.useCallback(() => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    return new Map(visibleSortedRows.map(row => [row.id, row.model]));\n  }, [apiRef]);\n  const filterApi = {\n    setFilterLinkOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    getVisibleRowModels,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'GridFilterApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.filterModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null || // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.unstable_updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$componentsProp;\n\n      const FilterPanel = props.components.FilterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.components.FilterPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === GridFeatureModeConstant.client && params.isRowMatchingFilters) {\n      const rowIds = gridRowIdsSelector(apiRef);\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.columnField && filterableColumnsLookup[item.columnField]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"]},"metadata":{},"sourceType":"module"}