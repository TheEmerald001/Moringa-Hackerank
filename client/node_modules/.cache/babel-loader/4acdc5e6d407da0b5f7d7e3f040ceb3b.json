{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"rowCount\", \"visibleRowCount\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['rowCount']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridRowCountRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'RowCount',\n  overridesResolver: (props, styles) => styles.rowCount\n})(({\n  theme\n}) => ({\n  alignItems: 'center',\n  display: 'flex',\n  margin: theme.spacing(0, 2)\n}));\nconst GridRowCount = /*#__PURE__*/React.forwardRef(function GridRowCount(props, ref) {\n  const {\n    className,\n    rowCount,\n    visibleRowCount\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n\n  if (rowCount === 0) {\n    return null;\n  }\n\n  const text = visibleRowCount < rowCount ? apiRef.current.getLocaleText('footerTotalVisibleRows')(visibleRowCount, rowCount) : rowCount.toLocaleString();\n  return /*#__PURE__*/_jsxs(GridRowCountRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    children: [apiRef.current.getLocaleText('footerTotalRows'), \" \", text]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRowCount.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  rowCount: PropTypes.number.isRequired,\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  visibleRowCount: PropTypes.number.isRequired\n} : void 0;\nexport { GridRowCount };","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/components/GridRowCount.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","styled","useGridApiContext","getDataGridUtilityClass","useGridRootProps","jsxs","_jsxs","useUtilityClasses","ownerState","classes","slots","root","GridRowCountRoot","name","slot","overridesResolver","props","styles","rowCount","theme","alignItems","display","margin","spacing","GridRowCount","forwardRef","ref","className","visibleRowCount","other","apiRef","rootProps","text","current","getLocaleText","toLocaleString","children","process","env","NODE_ENV","propTypes","number","isRequired","sx","oneOfType","arrayOf","func","object","bool"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"rowCount\", \"visibleRowCount\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass } from '../constants/gridClasses';\nimport { useGridRootProps } from '../hooks/utils/useGridRootProps';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['rowCount']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridRowCountRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'RowCount',\n  overridesResolver: (props, styles) => styles.rowCount\n})(({\n  theme\n}) => ({\n  alignItems: 'center',\n  display: 'flex',\n  margin: theme.spacing(0, 2)\n}));\nconst GridRowCount = /*#__PURE__*/React.forwardRef(function GridRowCount(props, ref) {\n  const {\n    className,\n    rowCount,\n    visibleRowCount\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n\n  if (rowCount === 0) {\n    return null;\n  }\n\n  const text = visibleRowCount < rowCount ? apiRef.current.getLocaleText('footerTotalVisibleRows')(visibleRowCount, rowCount) : rowCount.toLocaleString();\n  return /*#__PURE__*/_jsxs(GridRowCountRoot, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other, {\n    children: [apiRef.current.getLocaleText('footerTotalRows'), \" \", text]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridRowCount.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  rowCount: PropTypes.number.isRequired,\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  visibleRowCount: PropTypes.number.isRequired\n} : void 0;\nexport { GridRowCount };"]},"metadata":{},"sourceType":"module"}