{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const buildPrintWindow = React.useCallback(title => {\n    const iframeEl = document.createElement('iframe');\n    iframeEl.id = 'grid-print-window'; // Without this 'onload' event won't fire in some browsers\n\n    iframeEl.src = window.location.href;\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _printWindow$contentW, _querySelector, _querySelector2;\n\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options); // Some agents, such as IE11 and Enzyme (as of 2 Jun 2020) continuously call the\n    // `onload` callback. This ensures that it is only called once.\n\n\n    printWindow.onload = null;\n    const printDoc = printWindow.contentDocument || ((_printWindow$contentW = printWindow.contentWindow) == null ? void 0 : _printWindow$contentW.document);\n\n    if (!printDoc) {\n      return;\n    }\n\n    const totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // Remove all loaded elements from the current host\n\n    printDoc.body.innerHTML = '';\n    printDoc.body.appendChild(gridClone);\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      const headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2; // Remove the print iframe\n\n\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n    if (props.pagination) {\n      const visibleRowCount = gridVisibleRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n    doc.current.body.appendChild(printWindow);\n\n    if (process.env.NODE_ENV === 'test') {\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => handlePrintWindowLoad(printWindow, options);\n\n      printWindow.contentWindow.onafterprint = () => handlePrintWindowAfterPrint(printWindow);\n    }\n  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"names":["_extends","React","ownerDocument","useGridLogger","gridVisibleRowCountSelector","gridColumnDefinitionsSelector","gridColumnVisibilityModelSelector","gridDensityTotalHeaderHeightSelector","gridClasses","useGridApiMethod","gridRowsMetaSelector","getColumnsToExport","useGridRegisterPipeProcessor","GridPrintExportMenuItem","jsx","_jsx","useGridPrintExport","apiRef","props","logger","doc","useRef","previousGridState","previousColumnVisibility","useEffect","current","rootElementRef","updateGridColumnsForPrint","useCallback","fields","allColumns","Promise","resolve","exportedColumnFields","options","map","column","field","columns","newColumnVisibilityModel","forEach","includes","setColumnVisibilityModel","buildPrintWindow","title","iframeEl","document","createElement","id","src","window","location","href","style","position","width","height","handlePrintWindowLoad","printWindow","_printWindow$contentW","_querySelector","_querySelector2","normalizeOptions","copyStyles","hideToolbar","hideFooter","onload","printDoc","contentDocument","contentWindow","totalHeaderHeight","rowsMeta","state","gridRootElement","gridClone","cloneNode","gridCloneViewport","querySelector","virtualScroller","parentElement","gridMain","main","overflow","columnHeaders","columnHeadersInner","gridToolbarElementHeight","toolbarContainer","clientHeight","gridFooterElementHeight","footerContainer","_gridClone$querySelec","remove","_gridClone$querySelec2","currentPageTotalHeight","body","innerHTML","appendChild","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","headStyleElements","querySelectorAll","i","length","node","tagName","newHeadStyleElements","sheet","styleCSS","j","cssRules","cssText","getAttribute","attributes","attr","setAttribute","nodeName","nodeValue","process","env","NODE_ENV","print","handlePrintWindowAfterPrint","_previousGridState$cu","_previousGridState$cu2","removeChild","restoreState","columnVisibilityModel","unstable_enableVirtualization","exportDataAsPrint","debug","Error","exportState","pagination","visibleRowCount","setPageSize","unstable_disableVirtualization","fileName","onafterprint","printExportApi","addExportMenuButtons","initialValue","_options$printOptions","printOptions","disableToolbarButton","component","componentName"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,2BAAT,QAA4C,8BAA5C;AACA,SAASC,6BAAT,EAAwCC,iCAAxC,QAAiF,gCAAjF;AACA,SAASC,oCAAT,QAAqD,4BAArD;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,SAASC,4BAAT,QAA6C,2BAA7C;AACA,SAASC,uBAAT,QAAwC,+CAAxC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACnD,QAAMC,MAAM,GAAGhB,aAAa,CAACc,MAAD,EAAS,oBAAT,CAA5B;AACA,QAAMG,GAAG,GAAGnB,KAAK,CAACoB,MAAN,CAAa,IAAb,CAAZ;AACA,QAAMC,iBAAiB,GAAGrB,KAAK,CAACoB,MAAN,CAAa,IAAb,CAA1B;AACA,QAAME,wBAAwB,GAAGtB,KAAK,CAACoB,MAAN,CAAa,EAAb,CAAjC;AACApB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,GAAG,CAACK,OAAJ,GAAcvB,aAAa,CAACe,MAAM,CAACQ,OAAP,CAAeC,cAAf,CAA8BD,OAA/B,CAA3B;AACD,GAFD,EAEG,CAACR,MAAD,CAFH,EALmD,CAOrC;AACd;;AAEA,QAAMU,yBAAyB,GAAG1B,KAAK,CAAC2B,WAAN,CAAkB,CAACC,MAAD,EAASC,UAAT,KAAwB,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AACjG,QAAI,CAACH,MAAD,IAAW,CAACC,UAAhB,EAA4B;AAC1BE,MAAAA,OAAO;AACP;AACD;;AAED,UAAMC,oBAAoB,GAAGtB,kBAAkB,CAAC;AAC9CM,MAAAA,MAD8C;AAE9CiB,MAAAA,OAAO,EAAE;AACPL,QAAAA,MADO;AAEPC,QAAAA;AAFO;AAFqC,KAAD,CAAlB,CAM1BK,GAN0B,CAMtBC,MAAM,IAAIA,MAAM,CAACC,KANK,CAA7B;AAOA,UAAMC,OAAO,GAAGjC,6BAA6B,CAACY,MAAD,CAA7C;AACA,UAAMsB,wBAAwB,GAAG,EAAjC;AACAD,IAAAA,OAAO,CAACE,OAAR,CAAgBJ,MAAM,IAAI;AACxBG,MAAAA,wBAAwB,CAACH,MAAM,CAACC,KAAR,CAAxB,GAAyCJ,oBAAoB,CAACQ,QAArB,CAA8BL,MAAM,CAACC,KAArC,CAAzC;AACD,KAFD;AAGApB,IAAAA,MAAM,CAACQ,OAAP,CAAeiB,wBAAf,CAAwCH,wBAAxC;AACAP,IAAAA,OAAO;AACR,GApB2E,CAA1C,EAoB9B,CAACf,MAAD,CApB8B,CAAlC;AAqBA,QAAM0B,gBAAgB,GAAG1C,KAAK,CAAC2B,WAAN,CAAkBgB,KAAK,IAAI;AAClD,UAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAjB;AACAF,IAAAA,QAAQ,CAACG,EAAT,GAAc,mBAAd,CAFkD,CAEf;;AAEnCH,IAAAA,QAAQ,CAACI,GAAT,GAAeC,MAAM,CAACC,QAAP,CAAgBC,IAA/B;AACAP,IAAAA,QAAQ,CAACQ,KAAT,CAAeC,QAAf,GAA0B,UAA1B;AACAT,IAAAA,QAAQ,CAACQ,KAAT,CAAeE,KAAf,GAAuB,KAAvB;AACAV,IAAAA,QAAQ,CAACQ,KAAT,CAAeG,MAAf,GAAwB,KAAxB;AACAX,IAAAA,QAAQ,CAACD,KAAT,GAAiBA,KAAK,IAAIE,QAAQ,CAACF,KAAnC;AACA,WAAOC,QAAP;AACD,GAVwB,EAUtB,EAVsB,CAAzB;AAWA,QAAMY,qBAAqB,GAAGxD,KAAK,CAAC2B,WAAN,CAAkB,CAAC8B,WAAD,EAAcxB,OAAd,KAA0B;AACxE,QAAIyB,qBAAJ,EAA2BC,cAA3B,EAA2CC,eAA3C;;AAEA,UAAMC,gBAAgB,GAAG9D,QAAQ,CAAC;AAChC+D,MAAAA,UAAU,EAAE,IADoB;AAEhCC,MAAAA,WAAW,EAAE,KAFmB;AAGhCC,MAAAA,UAAU,EAAE;AAHoB,KAAD,EAI9B/B,OAJ8B,CAAjC,CAHwE,CAO3D;AACb;;;AAGAwB,IAAAA,WAAW,CAACQ,MAAZ,GAAqB,IAArB;AACA,UAAMC,QAAQ,GAAGT,WAAW,CAACU,eAAZ,KAAgC,CAACT,qBAAqB,GAAGD,WAAW,CAACW,aAArC,KAAuD,IAAvD,GAA8D,KAAK,CAAnE,GAAuEV,qBAAqB,CAACb,QAA7H,CAAjB;;AAEA,QAAI,CAACqB,QAAL,EAAe;AACb;AACD;;AAED,UAAMG,iBAAiB,GAAG/D,oCAAoC,CAACU,MAAD,CAA9D;AACA,UAAMsD,QAAQ,GAAG7D,oBAAoB,CAACO,MAAM,CAACQ,OAAP,CAAe+C,KAAhB,CAArC;AACA,UAAMC,eAAe,GAAGxD,MAAM,CAACQ,OAAP,CAAeC,cAAf,CAA8BD,OAAtD;AACA,UAAMiD,SAAS,GAAGD,eAAe,CAACE,SAAhB,CAA0B,IAA1B,CAAlB;AACA,UAAMC,iBAAiB,GAAGF,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAACsE,eAAgB,EAAxD,CAA1B,CAtBwE,CAsBc;;AAEtFF,IAAAA,iBAAiB,CAACvB,KAAlB,CAAwBG,MAAxB,GAAiC,MAAjC;AACAoB,IAAAA,iBAAiB,CAACvB,KAAlB,CAAwBE,KAAxB,GAAgC,MAAhC;AACAqB,IAAAA,iBAAiB,CAACG,aAAlB,CAAgC1B,KAAhC,CAAsCE,KAAtC,GAA8C,MAA9C;AACAqB,IAAAA,iBAAiB,CAACG,aAAlB,CAAgC1B,KAAhC,CAAsCG,MAAtC,GAA+C,MAA/C,CA3BwE,CA2BjB;;AAEvD,UAAMwB,QAAQ,GAAGN,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAACyE,IAAK,EAA7C,CAAjB;AACAD,IAAAA,QAAQ,CAAC3B,KAAT,CAAe6B,QAAf,GAA0B,SAA1B;AACA,UAAMC,aAAa,GAAGT,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAAC2E,aAAc,EAAtD,CAAtB;AACA,UAAMC,kBAAkB,GAAGD,aAAa,CAACN,aAAd,CAA6B,IAAGrE,WAAW,CAAC4E,kBAAmB,EAA/D,CAA3B;AACAA,IAAAA,kBAAkB,CAAC/B,KAAnB,CAAyBE,KAAzB,GAAiC,MAAjC;AACA,QAAI8B,wBAAwB,GAAG,CAAC,CAACzB,cAAc,GAAGa,eAAe,CAACI,aAAhB,CAA+B,IAAGrE,WAAW,CAAC8E,gBAAiB,EAA/D,CAAlB,KAAwF,IAAxF,GAA+F,KAAK,CAApG,GAAwG1B,cAAc,CAAC2B,YAAxH,KAAyI,CAAxK;AACA,QAAIC,uBAAuB,GAAG,CAAC,CAAC3B,eAAe,GAAGY,eAAe,CAACI,aAAhB,CAA+B,IAAGrE,WAAW,CAACiF,eAAgB,EAA9D,CAAnB,KAAwF,IAAxF,GAA+F,KAAK,CAApG,GAAwG5B,eAAe,CAAC0B,YAAzH,KAA0I,CAAxK;;AAEA,QAAIzB,gBAAgB,CAACE,WAArB,EAAkC;AAChC,UAAI0B,qBAAJ;;AAEA,OAACA,qBAAqB,GAAGhB,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAAC8E,gBAAiB,EAAzD,CAAzB,KAAyF,IAAzF,GAAgG,KAAK,CAArG,GAAyGI,qBAAqB,CAACC,MAAtB,EAAzG;AACAN,MAAAA,wBAAwB,GAAG,CAA3B;AACD;;AAED,QAAIvB,gBAAgB,CAACG,UAArB,EAAiC;AAC/B,UAAI2B,sBAAJ;;AAEA,OAACA,sBAAsB,GAAGlB,SAAS,CAACG,aAAV,CAAyB,IAAGrE,WAAW,CAACiF,eAAgB,EAAxD,CAA1B,KAAyF,IAAzF,GAAgG,KAAK,CAArG,GAAyGG,sBAAsB,CAACD,MAAvB,EAAzG;AACAH,MAAAA,uBAAuB,GAAG,CAA1B;AACD,KAjDuE,CAiDtE;;;AAGFd,IAAAA,SAAS,CAACrB,KAAV,CAAgBG,MAAhB,GAA0B,GAAEe,QAAQ,CAACsB,sBAAT,GAAkCvB,iBAAlC,GAAsDe,wBAAtD,GAAiFG,uBAAwB,IAArI,CApDwE,CAoDkE;;AAE1IrB,IAAAA,QAAQ,CAAC2B,IAAT,CAAcC,SAAd,GAA0B,EAA1B;AACA5B,IAAAA,QAAQ,CAAC2B,IAAT,CAAcE,WAAd,CAA0BtB,SAA1B;AACA,UAAMuB,gBAAgB,GAAG,OAAOnC,gBAAgB,CAACoC,SAAxB,KAAsC,UAAtC,GAAmDpC,gBAAgB,CAACoC,SAAjB,EAAnD,GAAkFpC,gBAAgB,CAACoC,SAA5H;;AAEA,QAAI,OAAOD,gBAAP,KAA4B,QAAhC,EAA0C;AACxC;AACA,YAAME,YAAY,GAAGhC,QAAQ,CAACpB,aAAT,CAAuB,OAAvB,CAArB;AACAoD,MAAAA,YAAY,CAACH,WAAb,CAAyB7B,QAAQ,CAACiC,cAAT,CAAwBH,gBAAxB,CAAzB;AACA9B,MAAAA,QAAQ,CAACkC,IAAT,CAAcL,WAAd,CAA0BG,YAA1B;AACD;;AAED,QAAIrC,gBAAgB,CAACwC,aAArB,EAAoC;AAClCnC,MAAAA,QAAQ,CAAC2B,IAAT,CAAcS,SAAd,CAAwBC,GAAxB,CAA4B,GAAG1C,gBAAgB,CAACwC,aAAjB,CAA+BG,KAA/B,CAAqC,GAArC,CAA/B;AACD;;AAED,QAAI3C,gBAAgB,CAACC,UAArB,EAAiC;AAC/B,YAAM2C,iBAAiB,GAAGtF,GAAG,CAACK,OAAJ,CAAYkF,gBAAZ,CAA6B,+BAA7B,CAA1B;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,iBAAiB,CAACG,MAAtC,EAA8CD,CAAC,IAAI,CAAnD,EAAsD;AACpD,cAAME,IAAI,GAAGJ,iBAAiB,CAACE,CAAD,CAA9B;;AAEA,YAAIE,IAAI,CAACC,OAAL,KAAiB,OAArB,EAA8B;AAC5B,gBAAMC,oBAAoB,GAAG7C,QAAQ,CAACpB,aAAT,CAAuB+D,IAAI,CAACC,OAA5B,CAA7B;AACA,gBAAME,KAAK,GAAGH,IAAI,CAACG,KAAnB;;AAEA,cAAIA,KAAJ,EAAW;AACT,gBAAIC,QAAQ,GAAG,EAAf,CADS,CACU;;AAEnB,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,QAAN,CAAeP,MAAnC,EAA2CM,CAAC,IAAI,CAAhD,EAAmD;AACjD,kBAAI,OAAOF,KAAK,CAACG,QAAN,CAAeD,CAAf,EAAkBE,OAAzB,KAAqC,QAAzC,EAAmD;AACjDH,gBAAAA,QAAQ,IAAK,GAAED,KAAK,CAACG,QAAN,CAAeD,CAAf,EAAkBE,OAAQ,MAAzC;AACD;AACF;;AAEDL,YAAAA,oBAAoB,CAAChB,WAArB,CAAiC7B,QAAQ,CAACiC,cAAT,CAAwBc,QAAxB,CAAjC;AACA/C,YAAAA,QAAQ,CAACkC,IAAT,CAAcL,WAAd,CAA0BgB,oBAA1B;AACD;AACF,SAhBD,MAgBO,IAAIF,IAAI,CAACQ,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpC;AACA,gBAAMN,oBAAoB,GAAG7C,QAAQ,CAACpB,aAAT,CAAuB+D,IAAI,CAACC,OAA5B,CAA7B;;AAEA,eAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACS,UAAL,CAAgBV,MAApC,EAA4CM,CAAC,IAAI,CAAjD,EAAoD;AAClD,kBAAMK,IAAI,GAAGV,IAAI,CAACS,UAAL,CAAgBJ,CAAhB,CAAb;;AAEA,gBAAIK,IAAJ,EAAU;AACRR,cAAAA,oBAAoB,CAACS,YAArB,CAAkCD,IAAI,CAACE,QAAvC,EAAiDF,IAAI,CAACG,SAAL,IAAkB,EAAnE;AACD;AACF;;AAEDxD,UAAAA,QAAQ,CAACkC,IAAT,CAAcL,WAAd,CAA0BgB,oBAA1B;AACD;AACF;AACF,KA1GuE,CA0GtE;;;AAGF,QAAIY,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnCpE,MAAAA,WAAW,CAACW,aAAZ,CAA0B0D,KAA1B;AACD;AACF,GAhH6B,EAgH3B,CAAC9G,MAAD,EAASG,GAAT,CAhH2B,CAA9B;AAiHA,QAAM4G,2BAA2B,GAAG/H,KAAK,CAAC2B,WAAN,CAAkB8B,WAAW,IAAI;AACnE,QAAIuE,qBAAJ,EAA2BC,sBAA3B,CADmE,CAGnE;;;AACA9G,IAAAA,GAAG,CAACK,OAAJ,CAAYqE,IAAZ,CAAiBqC,WAAjB,CAA6BzE,WAA7B,EAJmE,CAIxB;;AAE3CzC,IAAAA,MAAM,CAACQ,OAAP,CAAe2G,YAAf,CAA4B9G,iBAAiB,CAACG,OAAlB,IAA6B,EAAzD;;AAEA,QAAI,EAAE,CAACwG,qBAAqB,GAAG3G,iBAAiB,CAACG,OAA3C,KAAuD,IAAvD,IAA+D,CAACyG,sBAAsB,GAAGD,qBAAqB,CAAC3F,OAAhD,KAA4D,IAA3H,IAAmI4F,sBAAsB,CAACG,qBAA5J,CAAJ,EAAwL;AACtL;AACApH,MAAAA,MAAM,CAACQ,OAAP,CAAeiB,wBAAf,CAAwCnB,wBAAwB,CAACE,OAAjE;AACD;;AAEDR,IAAAA,MAAM,CAACQ,OAAP,CAAe6G,6BAAf,GAbmE,CAanB;;AAEhDhH,IAAAA,iBAAiB,CAACG,OAAlB,GAA4B,IAA5B;AACAF,IAAAA,wBAAwB,CAACE,OAAzB,GAAmC,EAAnC;AACD,GAjBmC,EAiBjC,CAACR,MAAD,CAjBiC,CAApC;AAkBA,QAAMsH,iBAAiB,GAAGtI,KAAK,CAAC2B,WAAN,CAAkB,MAAMM,OAAN,IAAiB;AAC3Df,IAAAA,MAAM,CAACqH,KAAP,CAAc,sBAAd;;AAEA,QAAI,CAACvH,MAAM,CAACQ,OAAP,CAAeC,cAAf,CAA8BD,OAAnC,EAA4C;AAC1C,YAAM,IAAIgH,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAEDnH,IAAAA,iBAAiB,CAACG,OAAlB,GAA4BR,MAAM,CAACQ,OAAP,CAAeiH,WAAf,EAA5B,CAP2D,CAOD;;AAE1DnH,IAAAA,wBAAwB,CAACE,OAAzB,GAAmCnB,iCAAiC,CAACW,MAAD,CAApE;;AAEA,QAAIC,KAAK,CAACyH,UAAV,EAAsB;AACpB,YAAMC,eAAe,GAAGxI,2BAA2B,CAACa,MAAD,CAAnD;AACAA,MAAAA,MAAM,CAACQ,OAAP,CAAeoH,WAAf,CAA2BD,eAA3B;AACD;;AAED,UAAMjH,yBAAyB,CAACO,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACL,MAApC,EAA4CK,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACJ,UAA/E,CAA/B;AACAb,IAAAA,MAAM,CAACQ,OAAP,CAAeqH,8BAAf;AACA,UAAMpF,WAAW,GAAGf,gBAAgB,CAACT,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAAC6G,QAApC,CAApC;AACA3H,IAAAA,GAAG,CAACK,OAAJ,CAAYqE,IAAZ,CAAiBE,WAAjB,CAA6BtC,WAA7B;;AAEA,QAAIkE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC;AACArE,MAAAA,qBAAqB,CAACC,WAAD,EAAcxB,OAAd,CAArB;AACA8F,MAAAA,2BAA2B,CAACtE,WAAD,CAA3B;AACD,KAJD,MAIO;AACLA,MAAAA,WAAW,CAACQ,MAAZ,GAAqB,MAAMT,qBAAqB,CAACC,WAAD,EAAcxB,OAAd,CAAhD;;AAEAwB,MAAAA,WAAW,CAACW,aAAZ,CAA0B2E,YAA1B,GAAyC,MAAMhB,2BAA2B,CAACtE,WAAD,CAA1E;AACD;AACF,GA9ByB,EA8BvB,CAACxC,KAAD,EAAQC,MAAR,EAAgBF,MAAhB,EAAwB0B,gBAAxB,EAA0Cc,qBAA1C,EAAiEuE,2BAAjE,EAA8FrG,yBAA9F,CA9BuB,CAA1B;AA+BA,QAAMsH,cAAc,GAAG;AACrBV,IAAAA;AADqB,GAAvB;AAGA9H,EAAAA,gBAAgB,CAACQ,MAAD,EAASgI,cAAT,EAAyB,oBAAzB,CAAhB;AACA;AACF;AACA;;AAEE,QAAMC,oBAAoB,GAAGjJ,KAAK,CAAC2B,WAAN,CAAkB,CAACuH,YAAD,EAAejH,OAAf,KAA2B;AACxE,QAAIkH,qBAAJ;;AAEA,QAAI,CAACA,qBAAqB,GAAGlH,OAAO,CAACmH,YAAjC,KAAkD,IAAlD,IAA0DD,qBAAqB,CAACE,oBAApF,EAA0G;AACxG,aAAOH,YAAP;AACD;;AAED,WAAO,CAAC,GAAGA,YAAJ,EAAkB;AACvBI,MAAAA,SAAS,EAAE,aAAaxI,IAAI,CAACF,uBAAD,EAA0B;AACpDqB,QAAAA,OAAO,EAAEA,OAAO,CAACmH;AADmC,OAA1B,CADL;AAIvBG,MAAAA,aAAa,EAAE;AAJQ,KAAlB,CAAP;AAMD,GAb4B,EAa1B,EAb0B,CAA7B;AAcA5I,EAAAA,4BAA4B,CAACK,MAAD,EAAS,YAAT,EAAuBiI,oBAAvB,CAA5B;AACD,CAnOM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridVisibleRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridDensityTotalHeaderHeightSelector } from '../density/densitySelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const buildPrintWindow = React.useCallback(title => {\n    const iframeEl = document.createElement('iframe');\n    iframeEl.id = 'grid-print-window'; // Without this 'onload' event won't fire in some browsers\n\n    iframeEl.src = window.location.href;\n    iframeEl.style.position = 'absolute';\n    iframeEl.style.width = '0px';\n    iframeEl.style.height = '0px';\n    iframeEl.title = title || document.title;\n    return iframeEl;\n  }, []);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _printWindow$contentW, _querySelector, _querySelector2;\n\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options); // Some agents, such as IE11 and Enzyme (as of 2 Jun 2020) continuously call the\n    // `onload` callback. This ensures that it is only called once.\n\n\n    printWindow.onload = null;\n    const printDoc = printWindow.contentDocument || ((_printWindow$contentW = printWindow.contentWindow) == null ? void 0 : _printWindow$contentW.document);\n\n    if (!printDoc) {\n      return;\n    }\n\n    const totalHeaderHeight = gridDensityTotalHeaderHeightSelector(apiRef);\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n    const gridCloneViewport = gridClone.querySelector(`.${gridClasses.virtualScroller}`); // Expand the viewport window to prevent clipping\n\n    gridCloneViewport.style.height = 'auto';\n    gridCloneViewport.style.width = 'auto';\n    gridCloneViewport.parentElement.style.width = 'auto';\n    gridCloneViewport.parentElement.style.height = 'auto'; // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.clientHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + totalHeaderHeight + gridToolbarElementHeight + gridFooterElementHeight}px`; // Remove all loaded elements from the current host\n\n    printDoc.body.innerHTML = '';\n    printDoc.body.appendChild(gridClone);\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      const headStyleElements = doc.current.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2;\n\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n    if (props.pagination) {\n      const visibleRowCount = gridVisibleRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n    doc.current.body.appendChild(printWindow);\n\n    if (process.env.NODE_ENV === 'test') {\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => handlePrintWindowLoad(printWindow, options);\n\n      printWindow.contentWindow.onafterprint = () => handlePrintWindowAfterPrint(printWindow);\n    }\n  }, [props, logger, apiRef, buildPrintWindow, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'GridPrintExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"]},"metadata":{},"sourceType":"module"}