{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n\n        return defaultMode;\n      }\n\n      return mode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    }); // 3. Start composing the theme object\n\n    let theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        systemMode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","theme","defaultTheme","attribute","defaultAttribute","modeStorageKey","defaultModeStorageKey","colorSchemeStorageKey","defaultColorSchemeStorageKey","defaultMode","designSystemMode","defaultColorScheme","designSystemColorScheme","disableTransitionOnChange","designSystemTransitionOnChange","shouldSkipGeneratingVar","designSystemShouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","storageWindow","window","documentNode","document","colorSchemeNode","documentElement","colorSchemeSelector","hasMounted","useRef","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","supportedColorSchemes","calculatedMode","calculatedColorScheme","css","rootCss","vars","rootVars","parsedTheme","prefix","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","key","scheme","parsedScheme","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n\n        return defaultMode;\n      }\n\n      return mode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    }); // 3. Start composing the theme object\n\n    let theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        systemMode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}