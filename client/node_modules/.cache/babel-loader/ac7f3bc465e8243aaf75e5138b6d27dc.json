{"ast":null,"code":"import * as React from 'react';\nimport { localStorageAvailable } from '../../utils/utils';\nconst forceDebug = localStorageAvailable() && window.localStorage.getItem('DEBUG') != null;\n\nconst noop = () => {};\n\nconst noopLogger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop\n};\nconst LOG_LEVELS = ['debug', 'info', 'warn', 'error'];\n\nfunction getAppender(name, logLevel, appender = console) {\n  const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);\n\n  if (minLogLevelIdx === -1) {\n    throw new Error(`MUI: Log level ${logLevel} not recognized.`);\n  }\n\n  const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {\n    if (idx >= minLogLevelIdx) {\n      loggerObj[method] = (...args) => {\n        const [message, ...other] = args;\n        appender[method](`MUI: ${name} - ${message}`, ...other);\n      };\n    } else {\n      loggerObj[method] = noop;\n    }\n\n    return loggerObj;\n  }, {});\n  return logger;\n}\n\nexport const useGridLoggerFactory = (apiRef, props) => {\n  apiRef.current.getLogger = React.useCallback(name => {\n    if (forceDebug) {\n      return getAppender(name, 'debug', props.logger);\n    }\n\n    if (!props.logLevel) {\n      return noopLogger;\n    }\n\n    return getAppender(name, props.logLevel.toString(), props.logger);\n  }, [props.logLevel, props.logger]);\n};","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.js"],"names":["React","localStorageAvailable","forceDebug","window","localStorage","getItem","noop","noopLogger","debug","info","warn","error","LOG_LEVELS","getAppender","name","logLevel","appender","console","minLogLevelIdx","indexOf","Error","logger","reduce","loggerObj","method","idx","args","message","other","useGridLoggerFactory","apiRef","props","current","getLogger","useCallback","toString"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AACA,MAAMC,UAAU,GAAGD,qBAAqB,MAAME,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,KAAwC,IAAtF;;AAEA,MAAMC,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAEF,IADU;AAEjBG,EAAAA,IAAI,EAAEH,IAFW;AAGjBI,EAAAA,IAAI,EAAEJ,IAHW;AAIjBK,EAAAA,KAAK,EAAEL;AAJU,CAAnB;AAMA,MAAMM,UAAU,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,MAAlB,EAA0B,OAA1B,CAAnB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,QAAQ,GAAGC,OAAhD,EAAyD;AACvD,QAAMC,cAAc,GAAGN,UAAU,CAACO,OAAX,CAAmBJ,QAAnB,CAAvB;;AAEA,MAAIG,cAAc,KAAK,CAAC,CAAxB,EAA2B;AACzB,UAAM,IAAIE,KAAJ,CAAW,kBAAiBL,QAAS,kBAArC,CAAN;AACD;;AAED,QAAMM,MAAM,GAAGT,UAAU,CAACU,MAAX,CAAkB,CAACC,SAAD,EAAYC,MAAZ,EAAoBC,GAApB,KAA4B;AAC3D,QAAIA,GAAG,IAAIP,cAAX,EAA2B;AACzBK,MAAAA,SAAS,CAACC,MAAD,CAAT,GAAoB,CAAC,GAAGE,IAAJ,KAAa;AAC/B,cAAM,CAACC,OAAD,EAAU,GAAGC,KAAb,IAAsBF,IAA5B;AACAV,QAAAA,QAAQ,CAACQ,MAAD,CAAR,CAAkB,QAAOV,IAAK,MAAKa,OAAQ,EAA3C,EAA8C,GAAGC,KAAjD;AACD,OAHD;AAID,KALD,MAKO;AACLL,MAAAA,SAAS,CAACC,MAAD,CAAT,GAAoBlB,IAApB;AACD;;AAED,WAAOiB,SAAP;AACD,GAXc,EAWZ,EAXY,CAAf;AAYA,SAAOF,MAAP;AACD;;AAED,OAAO,MAAMQ,oBAAoB,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACrDD,EAAAA,MAAM,CAACE,OAAP,CAAeC,SAAf,GAA2BjC,KAAK,CAACkC,WAAN,CAAkBpB,IAAI,IAAI;AACnD,QAAIZ,UAAJ,EAAgB;AACd,aAAOW,WAAW,CAACC,IAAD,EAAO,OAAP,EAAgBiB,KAAK,CAACV,MAAtB,CAAlB;AACD;;AAED,QAAI,CAACU,KAAK,CAAChB,QAAX,EAAqB;AACnB,aAAOR,UAAP;AACD;;AAED,WAAOM,WAAW,CAACC,IAAD,EAAOiB,KAAK,CAAChB,QAAN,CAAeoB,QAAf,EAAP,EAAkCJ,KAAK,CAACV,MAAxC,CAAlB;AACD,GAV0B,EAUxB,CAACU,KAAK,CAAChB,QAAP,EAAiBgB,KAAK,CAACV,MAAvB,CAVwB,CAA3B;AAWD,CAZM","sourcesContent":["import * as React from 'react';\nimport { localStorageAvailable } from '../../utils/utils';\nconst forceDebug = localStorageAvailable() && window.localStorage.getItem('DEBUG') != null;\n\nconst noop = () => {};\n\nconst noopLogger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop\n};\nconst LOG_LEVELS = ['debug', 'info', 'warn', 'error'];\n\nfunction getAppender(name, logLevel, appender = console) {\n  const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);\n\n  if (minLogLevelIdx === -1) {\n    throw new Error(`MUI: Log level ${logLevel} not recognized.`);\n  }\n\n  const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {\n    if (idx >= minLogLevelIdx) {\n      loggerObj[method] = (...args) => {\n        const [message, ...other] = args;\n        appender[method](`MUI: ${name} - ${message}`, ...other);\n      };\n    } else {\n      loggerObj[method] = noop;\n    }\n\n    return loggerObj;\n  }, {});\n  return logger;\n}\n\nexport const useGridLoggerFactory = (apiRef, props) => {\n  apiRef.current.getLogger = React.useCallback(name => {\n    if (forceDebug) {\n      return getAppender(name, 'debug', props.logger);\n    }\n\n    if (!props.logLevel) {\n      return noopLogger;\n    }\n\n    return getAppender(name, props.logLevel.toString(), props.logger);\n  }, [props.logLevel, props.logger]);\n};"]},"metadata":{},"sourceType":"module"}