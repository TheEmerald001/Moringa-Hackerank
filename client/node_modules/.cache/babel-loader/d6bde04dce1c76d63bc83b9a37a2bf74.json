{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler, useGridSelector } from '../../utils';\nimport { gridPageSizeSelector } from './gridPaginationSelector';\nimport { gridDensityRowHeightSelector } from '../density';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nexport const defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;\n\nconst mergeStateWithPageSize = pageSize => state => _extends({}, state, {\n  pagination: _extends({}, state.pagination, {\n    pageSize\n  })\n});\n/**\n * @requires useGridDimensions (event) - can be after\n */\n\n\nexport const useGridPageSize = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPageSize');\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'pageSize',\n    propModel: props.pageSize,\n    propOnChange: props.onPageSizeChange,\n    stateSelector: gridPageSizeSelector,\n    changeEvent: 'pageSizeChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPageSize = React.useCallback(pageSize => {\n    if (pageSize === gridPageSizeSelector(apiRef)) {\n      return;\n    }\n\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageSizeApi = {\n    setPageSize\n  };\n  useGridApiMethod(apiRef, pageSizeApi, 'GridPageSizeApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageSizeToExport = gridPageSizeSelector(apiRef);\n    const shouldExportPageSize = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the page size is controlled\n    props.pageSize != null || // Always export if the page size has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null || // Export if the page size is not equal to the default value\n    pageSizeToExport !== defaultPageSize(props.autoPageSize);\n\n    if (!shouldExportPageSize) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        pageSize: pageSizeToExport\n      })\n    });\n  }, [apiRef, props.pageSize, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.pageSize, props.autoPageSize]);\n  /**\n   * TODO: Add error if `prop.autoHeight = true`\n   */\n\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const pageSize = (_context$stateToResto = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto.pageSize;\n\n    if (pageSize != null) {\n      apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    const maximumPageSizeWithoutScrollBar = Math.floor((dimensions.viewportInnerSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom) / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.pageSize != null && !props.autoPageSize) {\n      apiRef.current.setPageSize(props.pageSize);\n    }\n  }, [apiRef, props.autoPageSize, props.pageSize]);\n  React.useEffect(() => {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPageSize.js"],"names":["_extends","React","useGridLogger","useGridApiMethod","useGridApiEventHandler","useGridSelector","gridPageSizeSelector","gridDensityRowHeightSelector","useGridRegisterPipeProcessor","calculatePinnedRowsHeight","defaultPageSize","autoPageSize","mergeStateWithPageSize","pageSize","state","pagination","useGridPageSize","apiRef","props","_props$initialState2","_props$initialState2$","logger","rowHeight","current","unstable_registerControlState","stateId","propModel","propOnChange","onPageSizeChange","stateSelector","changeEvent","setPageSize","useCallback","debug","setState","forceUpdate","pageSizeApi","stateExportPreProcessing","prevState","context","_props$initialState","_props$initialState$p","pageSizeToExport","shouldExportPageSize","exportOnlyDirtyModels","initialState","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","handleUpdateAutoPageSize","dimensions","getRootDimensions","pinnedRowsHeight","maximumPageSizeWithoutScrollBar","Math","floor","viewportInnerSize","height","top","bottom","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler, useGridSelector } from '../../utils';\nimport { gridPageSizeSelector } from './gridPaginationSelector';\nimport { gridDensityRowHeightSelector } from '../density';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nexport const defaultPageSize = autoPageSize => autoPageSize ? 0 : 100;\n\nconst mergeStateWithPageSize = pageSize => state => _extends({}, state, {\n  pagination: _extends({}, state.pagination, {\n    pageSize\n  })\n});\n/**\n * @requires useGridDimensions (event) - can be after\n */\n\n\nexport const useGridPageSize = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPageSize');\n  const rowHeight = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'pageSize',\n    propModel: props.pageSize,\n    propOnChange: props.onPageSizeChange,\n    stateSelector: gridPageSizeSelector,\n    changeEvent: 'pageSizeChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPageSize = React.useCallback(pageSize => {\n    if (pageSize === gridPageSizeSelector(apiRef)) {\n      return;\n    }\n\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageSizeApi = {\n    setPageSize\n  };\n  useGridApiMethod(apiRef, pageSizeApi, 'GridPageSizeApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageSizeToExport = gridPageSizeSelector(apiRef);\n    const shouldExportPageSize = // Always export if the `exportOnlyDirtyModels` property is activated\n    !context.exportOnlyDirtyModels || // Always export if the page size is controlled\n    props.pageSize != null || // Always export if the page size has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.pageSize) != null || // Export if the page size is not equal to the default value\n    pageSizeToExport !== defaultPageSize(props.autoPageSize);\n\n    if (!shouldExportPageSize) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        pageSize: pageSizeToExport\n      })\n    });\n  }, [apiRef, props.pageSize, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.pageSize, props.autoPageSize]);\n  /**\n   * TODO: Add error if `prop.autoHeight = true`\n   */\n\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const pageSize = (_context$stateToResto = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto.pageSize;\n\n    if (pageSize != null) {\n      apiRef.current.setState(mergeStateWithPageSize(pageSize));\n    }\n\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!props.autoPageSize || !dimensions) {\n      return;\n    }\n\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    const maximumPageSizeWithoutScrollBar = Math.floor((dimensions.viewportInnerSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom) / rowHeight);\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.pageSize != null && !props.autoPageSize) {\n      apiRef.current.setPageSize(props.pageSize);\n    }\n  }, [apiRef, props.autoPageSize, props.pageSize]);\n  React.useEffect(() => {\n    handleUpdateAutoPageSize();\n  }, [handleUpdateAutoPageSize]);\n};"]},"metadata":{},"sourceType":"module"}