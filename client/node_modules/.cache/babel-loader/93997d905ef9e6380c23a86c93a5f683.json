{"ast":null,"code":"// Used https://gist.github.com/mudge/5830382 as a starting point.\n// See https://github.com/browserify/events/blob/master/events.js for\n// the Node.js (https://nodejs.org/api/events.html) polyfill used by webpack.\nexport class EventManager {\n  constructor() {\n    this.maxListeners = 10;\n    this.warnOnce = false;\n    this.events = {};\n  }\n\n  on(eventName, listener, options = {}) {\n    let collection = this.events[eventName];\n\n    if (!collection) {\n      collection = {\n        highPriority: new Map(),\n        regular: new Map()\n      };\n      this.events[eventName] = collection;\n    }\n\n    if (options.isFirst) {\n      collection.highPriority.set(listener, true);\n    } else {\n      collection.regular.set(listener, true);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const collectionSize = collection.highPriority.size + collection.regular.size;\n\n      if (collectionSize > this.maxListeners && !this.warnOnce) {\n        this.warnOnce = true;\n        console.warn([`Possible EventEmitter memory leak detected. ${collectionSize} ${eventName} listeners added.`, `Use emitter.setMaxListeners() to increase limit.`].join('\\n'));\n      }\n    }\n  }\n\n  removeListener(eventName, listener) {\n    if (this.events[eventName]) {\n      this.events[eventName].regular.delete(listener);\n      this.events[eventName].highPriority.delete(listener);\n    }\n  }\n\n  removeAllListeners() {\n    this.events = {};\n  }\n\n  emit(eventName, ...args) {\n    const collection = this.events[eventName];\n\n    if (!collection) {\n      return;\n    }\n\n    const highPriorityListeners = Array.from(collection.highPriority.keys());\n    const regularListeners = Array.from(collection.regular.keys());\n\n    for (let i = highPriorityListeners.length - 1; i >= 0; i -= 1) {\n      const listener = highPriorityListeners[i];\n\n      if (collection.highPriority.has(listener)) {\n        listener.apply(this, args);\n      }\n    }\n\n    for (let i = 0; i < regularListeners.length; i += 1) {\n      const listener = regularListeners[i];\n\n      if (collection.regular.has(listener)) {\n        listener.apply(this, args);\n      }\n    }\n  }\n\n  once(eventName, listener) {\n    // eslint-disable-next-line consistent-this\n    const that = this;\n    this.on(eventName, function oneTimeListener(...args) {\n      that.removeListener(eventName, oneTimeListener);\n      listener.apply(that, args);\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/utils/EventManager.js"],"names":["EventManager","constructor","maxListeners","warnOnce","events","on","eventName","listener","options","collection","highPriority","Map","regular","isFirst","set","process","env","NODE_ENV","collectionSize","size","console","warn","join","removeListener","delete","removeAllListeners","emit","args","highPriorityListeners","Array","from","keys","regularListeners","i","length","has","apply","once","that","oneTimeListener"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,YAAN,CAAmB;AACxBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;AAEDC,EAAAA,EAAE,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,OAAO,GAAG,EAAhC,EAAoC;AACpC,QAAIC,UAAU,GAAG,KAAKL,MAAL,CAAYE,SAAZ,CAAjB;;AAEA,QAAI,CAACG,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG;AACXC,QAAAA,YAAY,EAAE,IAAIC,GAAJ,EADH;AAEXC,QAAAA,OAAO,EAAE,IAAID,GAAJ;AAFE,OAAb;AAIA,WAAKP,MAAL,CAAYE,SAAZ,IAAyBG,UAAzB;AACD;;AAED,QAAID,OAAO,CAACK,OAAZ,EAAqB;AACnBJ,MAAAA,UAAU,CAACC,YAAX,CAAwBI,GAAxB,CAA4BP,QAA5B,EAAsC,IAAtC;AACD,KAFD,MAEO;AACLE,MAAAA,UAAU,CAACG,OAAX,CAAmBE,GAAnB,CAAuBP,QAAvB,EAAiC,IAAjC;AACD;;AAED,QAAIQ,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAMC,cAAc,GAAGT,UAAU,CAACC,YAAX,CAAwBS,IAAxB,GAA+BV,UAAU,CAACG,OAAX,CAAmBO,IAAzE;;AAEA,UAAID,cAAc,GAAG,KAAKhB,YAAtB,IAAsC,CAAC,KAAKC,QAAhD,EAA0D;AACxD,aAAKA,QAAL,GAAgB,IAAhB;AACAiB,QAAAA,OAAO,CAACC,IAAR,CAAa,CAAE,+CAA8CH,cAAe,IAAGZ,SAAU,mBAA5E,EAAiG,kDAAjG,EAAoJgB,IAApJ,CAAyJ,IAAzJ,CAAb;AACD;AACF;AACF;;AAEDC,EAAAA,cAAc,CAACjB,SAAD,EAAYC,QAAZ,EAAsB;AAClC,QAAI,KAAKH,MAAL,CAAYE,SAAZ,CAAJ,EAA4B;AAC1B,WAAKF,MAAL,CAAYE,SAAZ,EAAuBM,OAAvB,CAA+BY,MAA/B,CAAsCjB,QAAtC;AACA,WAAKH,MAAL,CAAYE,SAAZ,EAAuBI,YAAvB,CAAoCc,MAApC,CAA2CjB,QAA3C;AACD;AACF;;AAEDkB,EAAAA,kBAAkB,GAAG;AACnB,SAAKrB,MAAL,GAAc,EAAd;AACD;;AAEDsB,EAAAA,IAAI,CAACpB,SAAD,EAAY,GAAGqB,IAAf,EAAqB;AACvB,UAAMlB,UAAU,GAAG,KAAKL,MAAL,CAAYE,SAAZ,CAAnB;;AAEA,QAAI,CAACG,UAAL,EAAiB;AACf;AACD;;AAED,UAAMmB,qBAAqB,GAAGC,KAAK,CAACC,IAAN,CAAWrB,UAAU,CAACC,YAAX,CAAwBqB,IAAxB,EAAX,CAA9B;AACA,UAAMC,gBAAgB,GAAGH,KAAK,CAACC,IAAN,CAAWrB,UAAU,CAACG,OAAX,CAAmBmB,IAAnB,EAAX,CAAzB;;AAEA,SAAK,IAAIE,CAAC,GAAGL,qBAAqB,CAACM,MAAtB,GAA+B,CAA5C,EAA+CD,CAAC,IAAI,CAApD,EAAuDA,CAAC,IAAI,CAA5D,EAA+D;AAC7D,YAAM1B,QAAQ,GAAGqB,qBAAqB,CAACK,CAAD,CAAtC;;AAEA,UAAIxB,UAAU,CAACC,YAAX,CAAwByB,GAAxB,CAA4B5B,QAA5B,CAAJ,EAA2C;AACzCA,QAAAA,QAAQ,CAAC6B,KAAT,CAAe,IAAf,EAAqBT,IAArB;AACD;AACF;;AAED,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,gBAAgB,CAACE,MAArC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;AACnD,YAAM1B,QAAQ,GAAGyB,gBAAgB,CAACC,CAAD,CAAjC;;AAEA,UAAIxB,UAAU,CAACG,OAAX,CAAmBuB,GAAnB,CAAuB5B,QAAvB,CAAJ,EAAsC;AACpCA,QAAAA,QAAQ,CAAC6B,KAAT,CAAe,IAAf,EAAqBT,IAArB;AACD;AACF;AACF;;AAEDU,EAAAA,IAAI,CAAC/B,SAAD,EAAYC,QAAZ,EAAsB;AACxB;AACA,UAAM+B,IAAI,GAAG,IAAb;AACA,SAAKjC,EAAL,CAAQC,SAAR,EAAmB,SAASiC,eAAT,CAAyB,GAAGZ,IAA5B,EAAkC;AACnDW,MAAAA,IAAI,CAACf,cAAL,CAAoBjB,SAApB,EAA+BiC,eAA/B;AACAhC,MAAAA,QAAQ,CAAC6B,KAAT,CAAeE,IAAf,EAAqBX,IAArB;AACD,KAHD;AAID;;AA/EuB","sourcesContent":["// Used https://gist.github.com/mudge/5830382 as a starting point.\n// See https://github.com/browserify/events/blob/master/events.js for\n// the Node.js (https://nodejs.org/api/events.html) polyfill used by webpack.\nexport class EventManager {\n  constructor() {\n    this.maxListeners = 10;\n    this.warnOnce = false;\n    this.events = {};\n  }\n\n  on(eventName, listener, options = {}) {\n    let collection = this.events[eventName];\n\n    if (!collection) {\n      collection = {\n        highPriority: new Map(),\n        regular: new Map()\n      };\n      this.events[eventName] = collection;\n    }\n\n    if (options.isFirst) {\n      collection.highPriority.set(listener, true);\n    } else {\n      collection.regular.set(listener, true);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      const collectionSize = collection.highPriority.size + collection.regular.size;\n\n      if (collectionSize > this.maxListeners && !this.warnOnce) {\n        this.warnOnce = true;\n        console.warn([`Possible EventEmitter memory leak detected. ${collectionSize} ${eventName} listeners added.`, `Use emitter.setMaxListeners() to increase limit.`].join('\\n'));\n      }\n    }\n  }\n\n  removeListener(eventName, listener) {\n    if (this.events[eventName]) {\n      this.events[eventName].regular.delete(listener);\n      this.events[eventName].highPriority.delete(listener);\n    }\n  }\n\n  removeAllListeners() {\n    this.events = {};\n  }\n\n  emit(eventName, ...args) {\n    const collection = this.events[eventName];\n\n    if (!collection) {\n      return;\n    }\n\n    const highPriorityListeners = Array.from(collection.highPriority.keys());\n    const regularListeners = Array.from(collection.regular.keys());\n\n    for (let i = highPriorityListeners.length - 1; i >= 0; i -= 1) {\n      const listener = highPriorityListeners[i];\n\n      if (collection.highPriority.has(listener)) {\n        listener.apply(this, args);\n      }\n    }\n\n    for (let i = 0; i < regularListeners.length; i += 1) {\n      const listener = regularListeners[i];\n\n      if (collection.regular.has(listener)) {\n        listener.apply(this, args);\n      }\n    }\n  }\n\n  once(eventName, listener) {\n    // eslint-disable-next-line consistent-this\n    const that = this;\n    this.on(eventName, function oneTimeListener(...args) {\n      that.removeListener(eventName, oneTimeListener);\n      listener.apply(that, args);\n    });\n  }\n\n}"]},"metadata":{},"sourceType":"module"}