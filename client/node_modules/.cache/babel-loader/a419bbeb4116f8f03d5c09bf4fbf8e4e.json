{"ast":null,"code":"import { useGridInitialization } from '../hooks/core/useGridInitialization';\nimport { useGridInitializeState } from '../hooks/utils/useGridInitializeState';\nimport { useGridClipboard } from '../hooks/features/clipboard/useGridClipboard';\nimport { columnMenuStateInitializer, useGridColumnMenu } from '../hooks/features/columnMenu/useGridColumnMenu';\nimport { useGridColumns, columnsStateInitializer } from '../hooks/features/columns/useGridColumns';\nimport { densityStateInitializer, useGridDensity } from '../hooks/features/density/useGridDensity';\nimport { useGridCsvExport } from '../hooks/features/export/useGridCsvExport';\nimport { useGridPrintExport } from '../hooks/features/export/useGridPrintExport';\nimport { useGridFilter, filterStateInitializer } from '../hooks/features/filter/useGridFilter';\nimport { focusStateInitializer, useGridFocus } from '../hooks/features/focus/useGridFocus';\nimport { useGridKeyboardNavigation } from '../hooks/features/keyboardNavigation/useGridKeyboardNavigation';\nimport { useGridPagination, paginationStateInitializer } from '../hooks/features/pagination/useGridPagination';\nimport { useGridPreferencesPanel, preferencePanelStateInitializer } from '../hooks/features/preferencesPanel/useGridPreferencesPanel';\nimport { useGridEditing as useGridEditing_old, editingStateInitializer as editingStateInitializer_old } from '../hooks/features/editRows/useGridEditing.old';\nimport { useGridEditing as useGridEditing_new, editingStateInitializer as editingStateInitializer_new } from '../hooks/features/editRows/useGridEditing.new';\nimport { useGridRows, rowsStateInitializer } from '../hooks/features/rows/useGridRows';\nimport { useGridRowsPreProcessors } from '../hooks/features/rows/useGridRowsPreProcessors';\nimport { useGridParamsApi } from '../hooks/features/rows/useGridParamsApi';\nimport { selectionStateInitializer, useGridSelection } from '../hooks/features/selection/useGridSelection';\nimport { useGridSelectionPreProcessors } from '../hooks/features/selection/useGridSelectionPreProcessors';\nimport { useGridSorting, sortingStateInitializer } from '../hooks/features/sorting/useGridSorting';\nimport { useGridScroll } from '../hooks/features/scroll/useGridScroll';\nimport { useGridEvents } from '../hooks/features/events/useGridEvents';\nimport { useGridDimensions } from '../hooks/features/dimensions/useGridDimensions';\nimport { rowsMetaStateInitializer, useGridRowsMeta } from '../hooks/features/rows/useGridRowsMeta';\nimport { useGridStatePersistence } from '../hooks/features/statePersistence/useGridStatePersistence';\nimport { useGridColumnSpanning } from '../hooks/features/columns/useGridColumnSpanning';\nimport { useGridColumnGrouping, columnGroupsStateInitializer } from '../hooks/features/columnGrouping/useGridColumnGrouping';\nimport { useGridColumnGroupingPreProcessors } from '../hooks/features/columnGrouping/useGridColumnGroupingPreProcessors';\nexport const useDataGridComponent = props => {\n  var _props$experimentalFe, _props$experimentalFe2;\n\n  const apiRef = useGridInitialization(undefined, props);\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n\n  useGridColumnGroupingPreProcessors(apiRef, props);\n  useGridSelectionPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n  /**\n   * Register all state initializers here.\n   */\n\n  useGridInitializeState(selectionStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.newEditingApi ? editingStateInitializer_new : editingStateInitializer_old, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridSelection(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridParamsApi(apiRef);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  const useGridEditing = (_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.newEditingApi ? useGridEditing_new : useGridEditing_old;\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef);\n  useGridPrintExport(apiRef, props);\n  useGridClipboard(apiRef);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  return apiRef;\n};","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/DataGrid/useDataGridComponent.js"],"names":["useGridInitialization","useGridInitializeState","useGridClipboard","columnMenuStateInitializer","useGridColumnMenu","useGridColumns","columnsStateInitializer","densityStateInitializer","useGridDensity","useGridCsvExport","useGridPrintExport","useGridFilter","filterStateInitializer","focusStateInitializer","useGridFocus","useGridKeyboardNavigation","useGridPagination","paginationStateInitializer","useGridPreferencesPanel","preferencePanelStateInitializer","useGridEditing","useGridEditing_old","editingStateInitializer","editingStateInitializer_old","useGridEditing_new","editingStateInitializer_new","useGridRows","rowsStateInitializer","useGridRowsPreProcessors","useGridParamsApi","selectionStateInitializer","useGridSelection","useGridSelectionPreProcessors","useGridSorting","sortingStateInitializer","useGridScroll","useGridEvents","useGridDimensions","rowsMetaStateInitializer","useGridRowsMeta","useGridStatePersistence","useGridColumnSpanning","useGridColumnGrouping","columnGroupsStateInitializer","useGridColumnGroupingPreProcessors","useDataGridComponent","props","_props$experimentalFe","_props$experimentalFe2","apiRef","undefined","experimentalFeatures","newEditingApi"],"mappings":"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","sourcesContent":["import { useGridInitialization } from '../hooks/core/useGridInitialization';\nimport { useGridInitializeState } from '../hooks/utils/useGridInitializeState';\nimport { useGridClipboard } from '../hooks/features/clipboard/useGridClipboard';\nimport { columnMenuStateInitializer, useGridColumnMenu } from '../hooks/features/columnMenu/useGridColumnMenu';\nimport { useGridColumns, columnsStateInitializer } from '../hooks/features/columns/useGridColumns';\nimport { densityStateInitializer, useGridDensity } from '../hooks/features/density/useGridDensity';\nimport { useGridCsvExport } from '../hooks/features/export/useGridCsvExport';\nimport { useGridPrintExport } from '../hooks/features/export/useGridPrintExport';\nimport { useGridFilter, filterStateInitializer } from '../hooks/features/filter/useGridFilter';\nimport { focusStateInitializer, useGridFocus } from '../hooks/features/focus/useGridFocus';\nimport { useGridKeyboardNavigation } from '../hooks/features/keyboardNavigation/useGridKeyboardNavigation';\nimport { useGridPagination, paginationStateInitializer } from '../hooks/features/pagination/useGridPagination';\nimport { useGridPreferencesPanel, preferencePanelStateInitializer } from '../hooks/features/preferencesPanel/useGridPreferencesPanel';\nimport { useGridEditing as useGridEditing_old, editingStateInitializer as editingStateInitializer_old } from '../hooks/features/editRows/useGridEditing.old';\nimport { useGridEditing as useGridEditing_new, editingStateInitializer as editingStateInitializer_new } from '../hooks/features/editRows/useGridEditing.new';\nimport { useGridRows, rowsStateInitializer } from '../hooks/features/rows/useGridRows';\nimport { useGridRowsPreProcessors } from '../hooks/features/rows/useGridRowsPreProcessors';\nimport { useGridParamsApi } from '../hooks/features/rows/useGridParamsApi';\nimport { selectionStateInitializer, useGridSelection } from '../hooks/features/selection/useGridSelection';\nimport { useGridSelectionPreProcessors } from '../hooks/features/selection/useGridSelectionPreProcessors';\nimport { useGridSorting, sortingStateInitializer } from '../hooks/features/sorting/useGridSorting';\nimport { useGridScroll } from '../hooks/features/scroll/useGridScroll';\nimport { useGridEvents } from '../hooks/features/events/useGridEvents';\nimport { useGridDimensions } from '../hooks/features/dimensions/useGridDimensions';\nimport { rowsMetaStateInitializer, useGridRowsMeta } from '../hooks/features/rows/useGridRowsMeta';\nimport { useGridStatePersistence } from '../hooks/features/statePersistence/useGridStatePersistence';\nimport { useGridColumnSpanning } from '../hooks/features/columns/useGridColumnSpanning';\nimport { useGridColumnGrouping, columnGroupsStateInitializer } from '../hooks/features/columnGrouping/useGridColumnGrouping';\nimport { useGridColumnGroupingPreProcessors } from '../hooks/features/columnGrouping/useGridColumnGroupingPreProcessors';\nexport const useDataGridComponent = props => {\n  var _props$experimentalFe, _props$experimentalFe2;\n\n  const apiRef = useGridInitialization(undefined, props);\n  /**\n   * Register all pre-processors called during state initialization here.\n   */\n\n  useGridColumnGroupingPreProcessors(apiRef, props);\n  useGridSelectionPreProcessors(apiRef, props);\n  useGridRowsPreProcessors(apiRef);\n  /**\n   * Register all state initializers here.\n   */\n\n  useGridInitializeState(selectionStateInitializer, apiRef, props);\n  useGridInitializeState(columnsStateInitializer, apiRef, props);\n  useGridInitializeState(columnGroupsStateInitializer, apiRef, props);\n  useGridInitializeState(rowsStateInitializer, apiRef, props);\n  useGridInitializeState((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.newEditingApi ? editingStateInitializer_new : editingStateInitializer_old, apiRef, props);\n  useGridInitializeState(focusStateInitializer, apiRef, props);\n  useGridInitializeState(sortingStateInitializer, apiRef, props);\n  useGridInitializeState(preferencePanelStateInitializer, apiRef, props);\n  useGridInitializeState(filterStateInitializer, apiRef, props);\n  useGridInitializeState(densityStateInitializer, apiRef, props);\n  useGridInitializeState(paginationStateInitializer, apiRef, props);\n  useGridInitializeState(rowsMetaStateInitializer, apiRef, props);\n  useGridInitializeState(columnMenuStateInitializer, apiRef, props);\n  useGridKeyboardNavigation(apiRef, props);\n  useGridSelection(apiRef, props);\n  useGridColumns(apiRef, props);\n  useGridRows(apiRef, props);\n  useGridParamsApi(apiRef);\n  useGridColumnSpanning(apiRef);\n  useGridColumnGrouping(apiRef, props);\n  const useGridEditing = (_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.newEditingApi ? useGridEditing_new : useGridEditing_old;\n  useGridEditing(apiRef, props);\n  useGridFocus(apiRef, props);\n  useGridPreferencesPanel(apiRef, props);\n  useGridFilter(apiRef, props);\n  useGridSorting(apiRef, props);\n  useGridDensity(apiRef, props);\n  useGridPagination(apiRef, props);\n  useGridRowsMeta(apiRef, props);\n  useGridScroll(apiRef, props);\n  useGridColumnMenu(apiRef);\n  useGridCsvExport(apiRef);\n  useGridPrintExport(apiRef, props);\n  useGridClipboard(apiRef);\n  useGridDimensions(apiRef, props);\n  useGridEvents(apiRef, props);\n  useGridStatePersistence(apiRef);\n  return apiRef;\n};"]},"metadata":{},"sourceType":"module"}