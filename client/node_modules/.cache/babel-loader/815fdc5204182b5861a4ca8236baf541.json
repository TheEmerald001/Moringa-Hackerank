{"ast":null,"code":"import { useCallback as $3vqmr$useCallback } from \"react\";\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\n\nfunction $6ed0406888f73fc4$var$setRef(ref, value) {\n  if (typeof ref === 'function') ref(value);else if (ref !== null && ref !== undefined) ref.current = value;\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\n\n\nfunction $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {\n  return node => refs.forEach(ref => $6ed0406888f73fc4$var$setRef(ref, node));\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\n\n\nfunction $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return $3vqmr$useCallback($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);\n}\n\nexport { $6ed0406888f73fc4$export$43e446d32b3d21af as composeRefs, $6ed0406888f73fc4$export$c7b2cbe3552a0d05 as useComposedRefs };","map":{"version":3,"sources":["packages/react/compose-refs/src/composeRefs.tsx"],"names":["ref","node","setRef","React","composeRefs"],"mappings":";AAIA;;;AAGA;;AACA,SAAA,4BAAA,CAAA,GAAA,EAAA,KAAA,EAAkD;AAChD,MAAI,OAAA,GAAA,KAAJ,UAAA,EACEA,GAAG,CAAHA,KAAG,CAAHA,CADF,KAEO,IAAIA,GAAG,KAAHA,IAAAA,IAAgBA,GAAG,KAAvB,SAAA,EACJA,GAAD,CAAA,OAACA,GAAD,KAACA;AAEJ;AAED;;;AAGA;;;AACA,SAAA,yCAAA,CAAwB,GAAxB,IAAA,EAAmD;AACjD,SAAO,IAACC,IAAY,IAAI,CAAJ,OAAA,CAAa,GAACD,IAAQE,4BAAM,CAAA,GAAA,EAA5B,IAA4B,CAA5B,CAApB;AACD;AAED;;;AAGA;;;AACA,SAAA,yCAAA,CAA4B,GAA5B,IAAA,EAAuD;AACrD;AACA,SAAOC,kBAAAA,CAAkBC,yCAAW,CAAA,GAA7BD,IAA6B,CAA7BA,EAAP,IAAOA,CAAP;AACD","sourcesContent":["import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n"]},"metadata":{},"sourceType":"module"}