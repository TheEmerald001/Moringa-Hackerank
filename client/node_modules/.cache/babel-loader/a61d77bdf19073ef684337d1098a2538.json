{"ast":null,"code":"import * as React from 'react';\nimport { isFunction } from '../../utils/utils';\nimport { useGridLogger } from './useGridLogger';\nexport const useGridNativeEventListener = (apiRef, ref, eventName, handler, options) => {\n  const logger = useGridLogger(apiRef, 'useNativeEventListener');\n  const [added, setAdded] = React.useState(false);\n  const handlerRef = React.useRef(handler);\n  const wrapHandler = React.useCallback(event => {\n    return handlerRef.current && handlerRef.current(event);\n  }, []);\n  React.useEffect(() => {\n    handlerRef.current = handler;\n  }, [handler]);\n  React.useEffect(() => {\n    let targetElement;\n\n    if (isFunction(ref)) {\n      targetElement = ref();\n    } else {\n      targetElement = ref && ref.current ? ref.current : null;\n    }\n\n    if (targetElement && eventName && !added) {\n      logger.debug(`Binding native ${eventName} event`);\n      targetElement.addEventListener(eventName, wrapHandler, options);\n      const boundElem = targetElement;\n      setAdded(true);\n\n      const unsubscribe = () => {\n        logger.debug(`Clearing native ${eventName} event`);\n        boundElem.removeEventListener(eventName, wrapHandler, options);\n      };\n\n      apiRef.current.subscribeEvent('unmount', unsubscribe);\n    }\n  }, [ref, wrapHandler, eventName, added, logger, options, apiRef]);\n};","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js"],"names":["React","isFunction","useGridLogger","useGridNativeEventListener","apiRef","ref","eventName","handler","options","logger","added","setAdded","useState","handlerRef","useRef","wrapHandler","useCallback","event","current","useEffect","targetElement","debug","addEventListener","boundElem","unsubscribe","removeEventListener","subscribeEvent"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAO,MAAMC,0BAA0B,GAAG,CAACC,MAAD,EAASC,GAAT,EAAcC,SAAd,EAAyBC,OAAzB,EAAkCC,OAAlC,KAA8C;AACtF,QAAMC,MAAM,GAAGP,aAAa,CAACE,MAAD,EAAS,wBAAT,CAA5B;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBX,KAAK,CAACY,QAAN,CAAe,KAAf,CAA1B;AACA,QAAMC,UAAU,GAAGb,KAAK,CAACc,MAAN,CAAaP,OAAb,CAAnB;AACA,QAAMQ,WAAW,GAAGf,KAAK,CAACgB,WAAN,CAAkBC,KAAK,IAAI;AAC7C,WAAOJ,UAAU,CAACK,OAAX,IAAsBL,UAAU,CAACK,OAAX,CAAmBD,KAAnB,CAA7B;AACD,GAFmB,EAEjB,EAFiB,CAApB;AAGAjB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpBN,IAAAA,UAAU,CAACK,OAAX,GAAqBX,OAArB;AACD,GAFD,EAEG,CAACA,OAAD,CAFH;AAGAP,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AACpB,QAAIC,aAAJ;;AAEA,QAAInB,UAAU,CAACI,GAAD,CAAd,EAAqB;AACnBe,MAAAA,aAAa,GAAGf,GAAG,EAAnB;AACD,KAFD,MAEO;AACLe,MAAAA,aAAa,GAAGf,GAAG,IAAIA,GAAG,CAACa,OAAX,GAAqBb,GAAG,CAACa,OAAzB,GAAmC,IAAnD;AACD;;AAED,QAAIE,aAAa,IAAId,SAAjB,IAA8B,CAACI,KAAnC,EAA0C;AACxCD,MAAAA,MAAM,CAACY,KAAP,CAAc,kBAAiBf,SAAU,QAAzC;AACAc,MAAAA,aAAa,CAACE,gBAAd,CAA+BhB,SAA/B,EAA0CS,WAA1C,EAAuDP,OAAvD;AACA,YAAMe,SAAS,GAAGH,aAAlB;AACAT,MAAAA,QAAQ,CAAC,IAAD,CAAR;;AAEA,YAAMa,WAAW,GAAG,MAAM;AACxBf,QAAAA,MAAM,CAACY,KAAP,CAAc,mBAAkBf,SAAU,QAA1C;AACAiB,QAAAA,SAAS,CAACE,mBAAV,CAA8BnB,SAA9B,EAAyCS,WAAzC,EAAsDP,OAAtD;AACD,OAHD;;AAKAJ,MAAAA,MAAM,CAACc,OAAP,CAAeQ,cAAf,CAA8B,SAA9B,EAAyCF,WAAzC;AACD;AACF,GAtBD,EAsBG,CAACnB,GAAD,EAAMU,WAAN,EAAmBT,SAAnB,EAA8BI,KAA9B,EAAqCD,MAArC,EAA6CD,OAA7C,EAAsDJ,MAAtD,CAtBH;AAuBD,CAjCM","sourcesContent":["import * as React from 'react';\nimport { isFunction } from '../../utils/utils';\nimport { useGridLogger } from './useGridLogger';\nexport const useGridNativeEventListener = (apiRef, ref, eventName, handler, options) => {\n  const logger = useGridLogger(apiRef, 'useNativeEventListener');\n  const [added, setAdded] = React.useState(false);\n  const handlerRef = React.useRef(handler);\n  const wrapHandler = React.useCallback(event => {\n    return handlerRef.current && handlerRef.current(event);\n  }, []);\n  React.useEffect(() => {\n    handlerRef.current = handler;\n  }, [handler]);\n  React.useEffect(() => {\n    let targetElement;\n\n    if (isFunction(ref)) {\n      targetElement = ref();\n    } else {\n      targetElement = ref && ref.current ? ref.current : null;\n    }\n\n    if (targetElement && eventName && !added) {\n      logger.debug(`Binding native ${eventName} event`);\n      targetElement.addEventListener(eventName, wrapHandler, options);\n      const boundElem = targetElement;\n      setAdded(true);\n\n      const unsubscribe = () => {\n        logger.debug(`Clearing native ${eventName} event`);\n        boundElem.removeEventListener(eventName, wrapHandler, options);\n      };\n\n      apiRef.current.subscribeEvent('unmount', unsubscribe);\n    }\n  }, [ref, wrapHandler, eventName, added, logger, options, apiRef]);\n};"]},"metadata":{},"sourceType":"module"}