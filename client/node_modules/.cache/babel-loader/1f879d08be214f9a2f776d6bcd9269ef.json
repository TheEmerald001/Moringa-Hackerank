{"ast":null,"code":"import { createContext as $3bkAK$createContext, useMemo as $3bkAK$useMemo, createElement as $3bkAK$createElement, useContext as $3bkAK$useContext } from \"react\";\n\nfunction $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n  const Context = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n\n  function Provider(props) {\n    const {\n      children: children,\n      ...context\n    } = props; // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    const value = $3bkAK$useMemo(() => context, Object.values(context));\n    return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n      value: value\n    }, children);\n  }\n\n  function useContext(consumerName) {\n    const context = $3bkAK$useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\n\nfunction $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {\n  let defaultContexts = [];\n  /* -----------------------------------------------------------------------------------------------\n  * createContext\n  * ---------------------------------------------------------------------------------------------*/\n\n  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n    const BaseContext = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(props) {\n      const {\n        scope: scope,\n        children: children,\n        ...context\n      } = props;\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext; // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n\n      const value = $3bkAK$useMemo(() => context, Object.values(context));\n      return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n        value: value\n      }, children);\n    }\n\n    function useContext(consumerName, scope) {\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;\n      const context = $3bkAK$useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext];\n  }\n  /* -----------------------------------------------------------------------------------------------\n  * createScope\n  * ---------------------------------------------------------------------------------------------*/\n\n\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n      return $3bkAK$useMemo(() => ({\n        [`__scope${scopeName}`]: { ...scope,\n          [scopeName]: contexts\n        }\n      }), [scope, contexts]);\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [$c512c27ab02ef895$export$fd42f52fd3ae1109, $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)];\n}\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\n\nfunction $c512c27ab02ef895$var$composeContextScopes(...scopes) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope1 = () => {\n    const scopeHooks = scopes.map(createScope => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes1 = scopeHooks.reduce((nextScopes, {\n        useScope: useScope,\n        scopeName: scopeName\n      }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes,\n          ...currentScope\n        };\n      }, {});\n      return $3bkAK$useMemo(() => ({\n        [`__scope${baseScope.scopeName}`]: nextScopes1\n      }), [nextScopes1]);\n    };\n  };\n\n  createScope1.scopeName = baseScope.scopeName;\n  return createScope1;\n}\n\nexport { $c512c27ab02ef895$export$fd42f52fd3ae1109 as createContext, $c512c27ab02ef895$export$50c7b4e9d9f19c1 as createContextScope };","map":{"version":3,"sources":["packages/react/context/src/index.ts","packages/react/context/src/createContext.tsx"],"names":["Context","React","value","Object","context","defaultContext","consumerName","rootComponentName","Provider","createContextScopeDeps","defaultContexts","BaseContext","index","createScope","scopeContexts","contexts","scopeName","composeContextScopes","baseScope","scopes","scopeHooks","useScope","nextScopes","scopeProps","currentScope"],"mappings":"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","sourcesContent":["export { createContext, createContextScope } from './createContext';\nexport type { CreateScope, Scope } from './createContext';\n","import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"]},"metadata":{},"sourceType":"module"}