{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridCsvExport = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    var _options$getRowsToExp, _options$includeHeade;\n\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      getCellParams: apiRef.current.getCellParams,\n      delimiterCharacter: options.delimiter || ',',\n      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true\n    });\n  }, [logger, apiRef]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'GridCsvExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$csvOptions;\n\n    if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js"],"names":["React","useGridApiMethod","useGridLogger","exportAs","buildCSV","getColumnsToExport","defaultGetRowsToExport","useGridRegisterPipeProcessor","GridCsvExportMenuItem","jsx","_jsx","useGridCsvExport","apiRef","logger","getDataAsCsv","useCallback","options","_options$getRowsToExp","_options$includeHeade","debug","exportedColumns","getRowsToExport","exportedRowIds","columns","rowIds","getCellParams","current","delimiterCharacter","delimiter","includeHeaders","exportDataAsCsv","csv","blob","Blob","utf8WithBom","Uint8Array","type","fileName","csvExportApi","addExportMenuButtons","initialValue","_options$csvOptions","csvOptions","disableToolbarButton","component","componentName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { exportAs } from '../../../utils/exportAs';\nimport { buildCSV } from './serializers/csvSerializer';\nimport { getColumnsToExport, defaultGetRowsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridCsvExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const useGridCsvExport = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridCsvExport');\n  const getDataAsCsv = React.useCallback((options = {}) => {\n    var _options$getRowsToExp, _options$includeHeade;\n\n    logger.debug(`Get data as CSV`);\n    const exportedColumns = getColumnsToExport({\n      apiRef,\n      options\n    });\n    const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;\n    const exportedRowIds = getRowsToExport({\n      apiRef\n    });\n    return buildCSV({\n      columns: exportedColumns,\n      rowIds: exportedRowIds,\n      getCellParams: apiRef.current.getCellParams,\n      delimiterCharacter: options.delimiter || ',',\n      includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true\n    });\n  }, [logger, apiRef]);\n  const exportDataAsCsv = React.useCallback(options => {\n    logger.debug(`Export data as CSV`);\n    const csv = getDataAsCsv(options);\n    const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([0xef, 0xbb, 0xbf]) : '', csv], {\n      type: 'text/csv'\n    });\n    exportAs(blob, 'csv', options == null ? void 0 : options.fileName);\n  }, [logger, getDataAsCsv]);\n  const csvExportApi = {\n    getDataAsCsv,\n    exportDataAsCsv\n  };\n  useGridApiMethod(apiRef, csvExportApi, 'GridCsvExportApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$csvOptions;\n\n    if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridCsvExportMenuItem, {\n        options: options.csvOptions\n      }),\n      componentName: 'csvExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"]},"metadata":{},"sourceType":"module"}