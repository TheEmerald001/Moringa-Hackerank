{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useGridApiContext } from '../../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { gridVisibleColumnDefinitionsSelector } from '../../../hooks/features/columns';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst HideGridColMenuItem = props => {\n  const {\n    column,\n    onClick\n  } = props;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const timeoutRef = React.useRef();\n  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n  const columnsWithMenu = visibleColumns.filter(col => col.disableColumnMenu !== true); // do not allow to hide the last column with menu\n\n  const disabled = columnsWithMenu.length === 1;\n  const toggleColumn = React.useCallback(event => {\n    /**\n     * Disabled `MenuItem` would trigger `click` event\n     * after imperative `.click()` call on HTML element.\n     * Also, click is triggered in testing environment as well.\n     */\n    if (disabled) {\n      return;\n    }\n\n    onClick(event); // time for the transition\n\n    timeoutRef.current = setTimeout(() => {\n      apiRef.current.setColumnVisibility(column == null ? void 0 : column.field, false);\n    }, 100);\n  }, [apiRef, column == null ? void 0 : column.field, onClick, disabled]);\n  React.useEffect(() => {\n    return () => clearTimeout(timeoutRef.current);\n  }, []);\n\n  if (rootProps.disableColumnSelector) {\n    return null;\n  }\n\n  if (column.hideable === false) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(MenuItem, {\n    onClick: toggleColumn,\n    disabled: disabled,\n    children: apiRef.current.getLocaleText('columnMenuHideColumn')\n  });\n};\n\nprocess.env.NODE_ENV !== \"production\" ? HideGridColMenuItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  column: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired\n} : void 0;\nexport { HideGridColMenuItem };","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/components/menu/columnMenu/HideGridColMenuItem.js"],"names":["React","PropTypes","MenuItem","useGridApiContext","useGridRootProps","gridVisibleColumnDefinitionsSelector","jsx","_jsx","HideGridColMenuItem","props","column","onClick","apiRef","rootProps","timeoutRef","useRef","visibleColumns","columnsWithMenu","filter","col","disableColumnMenu","disabled","length","toggleColumn","useCallback","event","current","setTimeout","setColumnVisibility","field","useEffect","clearTimeout","disableColumnSelector","hideable","children","getLocaleText","process","env","NODE_ENV","propTypes","object","isRequired","func"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,gBAAT,QAAiC,uCAAjC;AACA,SAASC,oCAAT,QAAqD,iCAArD;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,MAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACnC,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA;AAFI,MAGFF,KAHJ;AAIA,QAAMG,MAAM,GAAGT,iBAAiB,EAAhC;AACA,QAAMU,SAAS,GAAGT,gBAAgB,EAAlC;AACA,QAAMU,UAAU,GAAGd,KAAK,CAACe,MAAN,EAAnB;AACA,QAAMC,cAAc,GAAGX,oCAAoC,CAACO,MAAD,CAA3D;AACA,QAAMK,eAAe,GAAGD,cAAc,CAACE,MAAf,CAAsBC,GAAG,IAAIA,GAAG,CAACC,iBAAJ,KAA0B,IAAvD,CAAxB,CATmC,CASmD;;AAEtF,QAAMC,QAAQ,GAAGJ,eAAe,CAACK,MAAhB,KAA2B,CAA5C;AACA,QAAMC,YAAY,GAAGvB,KAAK,CAACwB,WAAN,CAAkBC,KAAK,IAAI;AAC9C;AACJ;AACA;AACA;AACA;AACI,QAAIJ,QAAJ,EAAc;AACZ;AACD;;AAEDV,IAAAA,OAAO,CAACc,KAAD,CAAP,CAV8C,CAU9B;;AAEhBX,IAAAA,UAAU,CAACY,OAAX,GAAqBC,UAAU,CAAC,MAAM;AACpCf,MAAAA,MAAM,CAACc,OAAP,CAAeE,mBAAf,CAAmClB,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACmB,KAApE,EAA2E,KAA3E;AACD,KAF8B,EAE5B,GAF4B,CAA/B;AAGD,GAfoB,EAelB,CAACjB,MAAD,EAASF,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACmB,KAA1C,EAAiDlB,OAAjD,EAA0DU,QAA1D,CAfkB,CAArB;AAgBArB,EAAAA,KAAK,CAAC8B,SAAN,CAAgB,MAAM;AACpB,WAAO,MAAMC,YAAY,CAACjB,UAAU,CAACY,OAAZ,CAAzB;AACD,GAFD,EAEG,EAFH;;AAIA,MAAIb,SAAS,CAACmB,qBAAd,EAAqC;AACnC,WAAO,IAAP;AACD;;AAED,MAAItB,MAAM,CAACuB,QAAP,KAAoB,KAAxB,EAA+B;AAC7B,WAAO,IAAP;AACD;;AAED,SAAO,aAAa1B,IAAI,CAACL,QAAD,EAAW;AACjCS,IAAAA,OAAO,EAAEY,YADwB;AAEjCF,IAAAA,QAAQ,EAAEA,QAFuB;AAGjCa,IAAAA,QAAQ,EAAEtB,MAAM,CAACc,OAAP,CAAeS,aAAf,CAA6B,sBAA7B;AAHuB,GAAX,CAAxB;AAKD,CA7CD;;AA+CAC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC9B,mBAAmB,CAAC+B,SAApB,GAAgC;AACtE;AACA;AACA;AACA;AACA7B,EAAAA,MAAM,EAAET,SAAS,CAACuC,MAAV,CAAiBC,UAL6C;AAMtE9B,EAAAA,OAAO,EAAEV,SAAS,CAACyC,IAAV,CAAeD;AAN8C,CAAxE,GAOI,KAAK,CAPT;AAQA,SAASjC,mBAAT","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport { useGridApiContext } from '../../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { gridVisibleColumnDefinitionsSelector } from '../../../hooks/features/columns';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst HideGridColMenuItem = props => {\n  const {\n    column,\n    onClick\n  } = props;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const timeoutRef = React.useRef();\n  const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n  const columnsWithMenu = visibleColumns.filter(col => col.disableColumnMenu !== true); // do not allow to hide the last column with menu\n\n  const disabled = columnsWithMenu.length === 1;\n  const toggleColumn = React.useCallback(event => {\n    /**\n     * Disabled `MenuItem` would trigger `click` event\n     * after imperative `.click()` call on HTML element.\n     * Also, click is triggered in testing environment as well.\n     */\n    if (disabled) {\n      return;\n    }\n\n    onClick(event); // time for the transition\n\n    timeoutRef.current = setTimeout(() => {\n      apiRef.current.setColumnVisibility(column == null ? void 0 : column.field, false);\n    }, 100);\n  }, [apiRef, column == null ? void 0 : column.field, onClick, disabled]);\n  React.useEffect(() => {\n    return () => clearTimeout(timeoutRef.current);\n  }, []);\n\n  if (rootProps.disableColumnSelector) {\n    return null;\n  }\n\n  if (column.hideable === false) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(MenuItem, {\n    onClick: toggleColumn,\n    disabled: disabled,\n    children: apiRef.current.getLocaleText('columnMenuHideColumn')\n  });\n};\n\nprocess.env.NODE_ENV !== \"production\" ? HideGridColMenuItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  column: PropTypes.object.isRequired,\n  onClick: PropTypes.func.isRequired\n} : void 0;\nexport { HideGridColMenuItem };"]},"metadata":{},"sourceType":"module"}