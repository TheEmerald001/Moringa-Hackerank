{"ast":null,"code":"import { GridFilterInputValue } from '../components/panel/filterPanel/GridFilterInputValue';\nimport { escapeRegExp } from '../utils/utils';\nimport { GridFilterInputMultipleValue } from '../components/panel/filterPanel/GridFilterInputMultipleValue';\nexport const getGridStringQuickFilterFn = value => {\n  if (!value) {\n    return null;\n  }\n\n  const filterRegex = new RegExp(escapeRegExp(value), 'i');\n  return ({\n    value: columnValue\n  }) => {\n    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;\n  };\n};\nexport const getGridStringOperators = (disableTrim = false) => [{\n  value: 'contains',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(escapeRegExp(filterItemValue), 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'equals',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => {\n      return value != null ? collator.compare(filterItemValue, value.toString()) === 0 : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'startsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'endsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'isEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value === '' || value == null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isNotEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value !== '' && value != null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map(val => val.trim());\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => value != null ? filterItemValue.some(filterValue => {\n      return collator.compare(filterValue, value.toString() || '') === 0;\n    }) : false;\n  },\n  InputComponent: GridFilterInputMultipleValue\n}];","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/colDef/gridStringOperators.js"],"names":["GridFilterInputValue","escapeRegExp","GridFilterInputMultipleValue","getGridStringQuickFilterFn","value","filterRegex","RegExp","columnValue","test","toString","getGridStringOperators","disableTrim","getApplyFilterFn","filterItem","filterItemValue","trim","InputComponent","collator","Intl","Collator","undefined","sensitivity","usage","compare","requiresFilterValue","Array","isArray","length","map","val","some","filterValue"],"mappings":"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","sourcesContent":["import { GridFilterInputValue } from '../components/panel/filterPanel/GridFilterInputValue';\nimport { escapeRegExp } from '../utils/utils';\nimport { GridFilterInputMultipleValue } from '../components/panel/filterPanel/GridFilterInputMultipleValue';\nexport const getGridStringQuickFilterFn = value => {\n  if (!value) {\n    return null;\n  }\n\n  const filterRegex = new RegExp(escapeRegExp(value), 'i');\n  return ({\n    value: columnValue\n  }) => {\n    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;\n  };\n};\nexport const getGridStringOperators = (disableTrim = false) => [{\n  value: 'contains',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(escapeRegExp(filterItemValue), 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'equals',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => {\n      return value != null ? collator.compare(filterItemValue, value.toString()) === 0 : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'startsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'endsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'isEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value === '' || value == null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isNotEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value !== '' && value != null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map(val => val.trim());\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => value != null ? filterItemValue.some(filterValue => {\n      return collator.compare(filterValue, value.toString() || '') === 0;\n    }) : false;\n  },\n  InputComponent: GridFilterInputMultipleValue\n}];"]},"metadata":{},"sourceType":"module"}