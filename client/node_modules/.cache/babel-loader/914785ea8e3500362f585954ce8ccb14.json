{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\"];\nimport * as React from 'react';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridPreferencePanelStateSelector } from '../../hooks/features/preferencesPanel/gridPreferencePanelSelector';\nimport { GridPreferencePanelsValue } from '../../hooks/features/preferencesPanel/gridPreferencePanelsValue';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const GridToolbarColumnsButton = /*#__PURE__*/React.forwardRef(function GridToolbarColumnsButton(props, ref) {\n  var _rootProps$components;\n\n  const {\n    onClick\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const {\n    open,\n    openedPanelValue\n  } = useGridSelector(apiRef, gridPreferencePanelStateSelector);\n\n  const showColumns = event => {\n    if (open && openedPanelValue === GridPreferencePanelsValue.columns) {\n      apiRef.current.hidePreferences();\n    } else {\n      apiRef.current.showPreferences(GridPreferencePanelsValue.columns);\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  }; // Disable the button if the corresponding is disabled\n\n\n  if (rootProps.disableColumnSelector) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(rootProps.components.BaseButton, _extends({\n    ref: ref,\n    size: \"small\",\n    \"aria-label\": apiRef.current.getLocaleText('toolbarColumnsLabel'),\n    startIcon: /*#__PURE__*/_jsx(rootProps.components.ColumnSelectorIcon, {})\n  }, other, {\n    onClick: showColumns\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseButton, {\n    children: apiRef.current.getLocaleText('toolbarColumns')\n  }));\n});","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarColumnsButton.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useGridSelector","gridPreferencePanelStateSelector","GridPreferencePanelsValue","useGridApiContext","useGridRootProps","jsx","_jsx","GridToolbarColumnsButton","forwardRef","props","ref","_rootProps$components","onClick","other","apiRef","rootProps","open","openedPanelValue","showColumns","event","columns","current","hidePreferences","showPreferences","disableColumnSelector","components","BaseButton","size","getLocaleText","startIcon","ColumnSelectorIcon","componentsProps","baseButton","children"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,SAAD,CAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAgC,mCAAhC;AACA,SAASC,gCAAT,QAAiD,mEAAjD;AACA,SAASC,yBAAT,QAA0C,iEAA1C;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,OAAO,MAAMC,wBAAwB,GAAG,aAAaR,KAAK,CAACS,UAAN,CAAiB,SAASD,wBAAT,CAAkCE,KAAlC,EAAyCC,GAAzC,EAA8C;AAClH,MAAIC,qBAAJ;;AAEA,QAAM;AACJC,IAAAA;AADI,MAEFH,KAFJ;AAAA,QAGMI,KAAK,GAAGhB,6BAA6B,CAACY,KAAD,EAAQX,SAAR,CAH3C;;AAKA,QAAMgB,MAAM,GAAGX,iBAAiB,EAAhC;AACA,QAAMY,SAAS,GAAGX,gBAAgB,EAAlC;AACA,QAAM;AACJY,IAAAA,IADI;AAEJC,IAAAA;AAFI,MAGFjB,eAAe,CAACc,MAAD,EAASb,gCAAT,CAHnB;;AAKA,QAAMiB,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAIH,IAAI,IAAIC,gBAAgB,KAAKf,yBAAyB,CAACkB,OAA3D,EAAoE;AAClEN,MAAAA,MAAM,CAACO,OAAP,CAAeC,eAAf;AACD,KAFD,MAEO;AACLR,MAAAA,MAAM,CAACO,OAAP,CAAeE,eAAf,CAA+BrB,yBAAyB,CAACkB,OAAzD;AACD;;AAEDR,IAAAA,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACO,KAAD,CAAlC;AACD,GARD,CAfkH,CAuB/G;;;AAGH,MAAIJ,SAAS,CAACS,qBAAd,EAAqC;AACnC,WAAO,IAAP;AACD;;AAED,SAAO,aAAalB,IAAI,CAACS,SAAS,CAACU,UAAV,CAAqBC,UAAtB,EAAkC9B,QAAQ,CAAC;AACjEc,IAAAA,GAAG,EAAEA,GAD4D;AAEjEiB,IAAAA,IAAI,EAAE,OAF2D;AAGjE,kBAAcb,MAAM,CAACO,OAAP,CAAeO,aAAf,CAA6B,qBAA7B,CAHmD;AAIjEC,IAAAA,SAAS,EAAE,aAAavB,IAAI,CAACS,SAAS,CAACU,UAAV,CAAqBK,kBAAtB,EAA0C,EAA1C;AAJqC,GAAD,EAK/DjB,KAL+D,EAKxD;AACRD,IAAAA,OAAO,EAAEM;AADD,GALwD,EAO/D,CAACP,qBAAqB,GAAGI,SAAS,CAACgB,eAAnC,KAAuD,IAAvD,GAA8D,KAAK,CAAnE,GAAuEpB,qBAAqB,CAACqB,UAP9B,EAO0C;AAC1GC,IAAAA,QAAQ,EAAEnB,MAAM,CAACO,OAAP,CAAeO,aAAf,CAA6B,gBAA7B;AADgG,GAP1C,CAA1C,CAAxB;AAUD,CAxCoD,CAA9C","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\"];\nimport * as React from 'react';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridPreferencePanelStateSelector } from '../../hooks/features/preferencesPanel/gridPreferencePanelSelector';\nimport { GridPreferencePanelsValue } from '../../hooks/features/preferencesPanel/gridPreferencePanelsValue';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const GridToolbarColumnsButton = /*#__PURE__*/React.forwardRef(function GridToolbarColumnsButton(props, ref) {\n  var _rootProps$components;\n\n  const {\n    onClick\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const {\n    open,\n    openedPanelValue\n  } = useGridSelector(apiRef, gridPreferencePanelStateSelector);\n\n  const showColumns = event => {\n    if (open && openedPanelValue === GridPreferencePanelsValue.columns) {\n      apiRef.current.hidePreferences();\n    } else {\n      apiRef.current.showPreferences(GridPreferencePanelsValue.columns);\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  }; // Disable the button if the corresponding is disabled\n\n\n  if (rootProps.disableColumnSelector) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(rootProps.components.BaseButton, _extends({\n    ref: ref,\n    size: \"small\",\n    \"aria-label\": apiRef.current.getLocaleText('toolbarColumnsLabel'),\n    startIcon: /*#__PURE__*/_jsx(rootProps.components.ColumnSelectorIcon, {})\n  }, other, {\n    onClick: showColumns\n  }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseButton, {\n    children: apiRef.current.getLocaleText('toolbarColumns')\n  }));\n});"]},"metadata":{},"sourceType":"module"}