{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useThemeProps from '../styles/useThemeProps';\nimport GlobalStyles from '../GlobalStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const html = (theme, enableColorScheme) => _extends({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%'\n}, enableColorScheme && !theme.vars && {\n  colorScheme: theme.palette.mode\n});\nexport const body = theme => _extends({\n  color: (theme.vars || theme).palette.text.primary\n}, theme.typography.body1, {\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = (theme, enableColorScheme = false) => {\n  var _theme$components, _theme$components$Mui;\n\n  const colorSchemeStyles = {};\n\n  if (enableColorScheme && theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      var _scheme$palette;\n\n      colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\\s*&/, '')] = {\n        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode\n      };\n    });\n  }\n\n  let defaultStyles = _extends({\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: _extends({\n      margin: 0\n    }, body(theme), {\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    })\n  }, colorSchemeStyles);\n\n  const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;\n\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n\n  return defaultStyles;\n};\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\n\nfunction CssBaseline(inProps) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(GlobalStyles, {\n      styles: theme => styles(theme, enableColorScheme)\n    }), children]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/material/esm/CssBaseline/CssBaseline.js"],"names":["_extends","React","PropTypes","useThemeProps","GlobalStyles","jsx","_jsx","jsxs","_jsxs","html","theme","enableColorScheme","WebkitFontSmoothing","MozOsxFontSmoothing","boxSizing","WebkitTextSizeAdjust","vars","colorScheme","palette","mode","body","color","text","primary","typography","body1","backgroundColor","background","default","common","white","styles","_theme$components","_theme$components$Mui","colorSchemeStyles","colorSchemes","Object","entries","forEach","key","scheme","_scheme$palette","getColorSchemeSelector","replace","defaultStyles","fontWeight","fontWeightBold","margin","themeOverrides","components","MuiCssBaseline","styleOverrides","CssBaseline","inProps","props","name","children","Fragment","process","env","NODE_ENV","propTypes","node","bool"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useThemeProps from '../styles/useThemeProps';\nimport GlobalStyles from '../GlobalStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const html = (theme, enableColorScheme) => _extends({\n  WebkitFontSmoothing: 'antialiased',\n  // Antialiasing.\n  MozOsxFontSmoothing: 'grayscale',\n  // Antialiasing.\n  // Change from `box-sizing: content-box` so that `width`\n  // is not affected by `padding` or `border`.\n  boxSizing: 'border-box',\n  // Fix font resize problem in iOS\n  WebkitTextSizeAdjust: '100%'\n}, enableColorScheme && !theme.vars && {\n  colorScheme: theme.palette.mode\n});\nexport const body = theme => _extends({\n  color: (theme.vars || theme).palette.text.primary\n}, theme.typography.body1, {\n  backgroundColor: (theme.vars || theme).palette.background.default,\n  '@media print': {\n    // Save printer ink.\n    backgroundColor: (theme.vars || theme).palette.common.white\n  }\n});\nexport const styles = (theme, enableColorScheme = false) => {\n  var _theme$components, _theme$components$Mui;\n\n  const colorSchemeStyles = {};\n\n  if (enableColorScheme && theme.colorSchemes) {\n    Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {\n      var _scheme$palette;\n\n      colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\\s*&/, '')] = {\n        colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode\n      };\n    });\n  }\n\n  let defaultStyles = _extends({\n    html: html(theme, enableColorScheme),\n    '*, *::before, *::after': {\n      boxSizing: 'inherit'\n    },\n    'strong, b': {\n      fontWeight: theme.typography.fontWeightBold\n    },\n    body: _extends({\n      margin: 0\n    }, body(theme), {\n      // Add support for document.body.requestFullScreen().\n      // Other elements, if background transparent, are not supported.\n      '&::backdrop': {\n        backgroundColor: (theme.vars || theme).palette.background.default\n      }\n    })\n  }, colorSchemeStyles);\n\n  const themeOverrides = (_theme$components = theme.components) == null ? void 0 : (_theme$components$Mui = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components$Mui.styleOverrides;\n\n  if (themeOverrides) {\n    defaultStyles = [defaultStyles, themeOverrides];\n  }\n\n  return defaultStyles;\n};\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n */\n\nfunction CssBaseline(inProps) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCssBaseline'\n  });\n  const {\n    children,\n    enableColorScheme = false\n  } = props;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(GlobalStyles, {\n      styles: theme => styles(theme, enableColorScheme)\n    }), children]\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? CssBaseline.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme: PropTypes.bool\n} : void 0;\nexport default CssBaseline;"]},"metadata":{},"sourceType":"module"}