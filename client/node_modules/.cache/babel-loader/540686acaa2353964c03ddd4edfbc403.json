{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridLogger } from '../../hooks/utils/useGridLogger';\nimport { GridMainContainer } from '../containers/GridMainContainer';\nimport { ErrorBoundary } from '../ErrorBoundary';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction GridErrorHandler(props) {\n  const {\n    children\n  } = props;\n  const apiRef = useGridApiContext();\n  const logger = useGridLogger(apiRef, 'GridErrorHandler');\n  const rootProps = useGridRootProps();\n  const error = apiRef.current.state.error;\n  return /*#__PURE__*/_jsx(ErrorBoundary, {\n    hasError: error != null,\n    componentProps: error,\n    api: apiRef,\n    logger: logger,\n    render: errorProps => {\n      var _rootProps$components;\n\n      return /*#__PURE__*/_jsx(GridMainContainer, {\n        children: /*#__PURE__*/_jsx(rootProps.components.ErrorOverlay, _extends({}, errorProps, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.errorOverlay))\n      });\n    },\n    children: children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridErrorHandler.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  children: PropTypes.node\n} : void 0;\nexport { GridErrorHandler };","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/components/base/GridErrorHandler.js"],"names":["_extends","React","PropTypes","useGridApiContext","useGridLogger","GridMainContainer","ErrorBoundary","useGridRootProps","jsx","_jsx","GridErrorHandler","props","children","apiRef","logger","rootProps","error","current","state","hasError","componentProps","api","render","errorProps","_rootProps$components","components","ErrorOverlay","componentsProps","errorOverlay","process","env","NODE_ENV","propTypes","node"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,gBAAT,QAAiC,oCAAjC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,QAAM;AACJC,IAAAA;AADI,MAEFD,KAFJ;AAGA,QAAME,MAAM,GAAGV,iBAAiB,EAAhC;AACA,QAAMW,MAAM,GAAGV,aAAa,CAACS,MAAD,EAAS,kBAAT,CAA5B;AACA,QAAME,SAAS,GAAGR,gBAAgB,EAAlC;AACA,QAAMS,KAAK,GAAGH,MAAM,CAACI,OAAP,CAAeC,KAAf,CAAqBF,KAAnC;AACA,SAAO,aAAaP,IAAI,CAACH,aAAD,EAAgB;AACtCa,IAAAA,QAAQ,EAAEH,KAAK,IAAI,IADmB;AAEtCI,IAAAA,cAAc,EAAEJ,KAFsB;AAGtCK,IAAAA,GAAG,EAAER,MAHiC;AAItCC,IAAAA,MAAM,EAAEA,MAJ8B;AAKtCQ,IAAAA,MAAM,EAAEC,UAAU,IAAI;AACpB,UAAIC,qBAAJ;;AAEA,aAAO,aAAaf,IAAI,CAACJ,iBAAD,EAAoB;AAC1CO,QAAAA,QAAQ,EAAE,aAAaH,IAAI,CAACM,SAAS,CAACU,UAAV,CAAqBC,YAAtB,EAAoC1B,QAAQ,CAAC,EAAD,EAAKuB,UAAL,EAAiB,CAACC,qBAAqB,GAAGT,SAAS,CAACY,eAAnC,KAAuD,IAAvD,GAA8D,KAAK,CAAnE,GAAuEH,qBAAqB,CAACI,YAA9G,CAA5C;AADe,OAApB,CAAxB;AAGD,KAXqC;AAYtChB,IAAAA,QAAQ,EAAEA;AAZ4B,GAAhB,CAAxB;AAcD;;AAEDiB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCrB,gBAAgB,CAACsB,SAAjB,GAA6B;AACnE;AACA;AACA;AACA;AACApB,EAAAA,QAAQ,EAAEV,SAAS,CAAC+B;AAL+C,CAArE,GAMI,KAAK,CANT;AAOA,SAASvB,gBAAT","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridLogger } from '../../hooks/utils/useGridLogger';\nimport { GridMainContainer } from '../containers/GridMainContainer';\nimport { ErrorBoundary } from '../ErrorBoundary';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction GridErrorHandler(props) {\n  const {\n    children\n  } = props;\n  const apiRef = useGridApiContext();\n  const logger = useGridLogger(apiRef, 'GridErrorHandler');\n  const rootProps = useGridRootProps();\n  const error = apiRef.current.state.error;\n  return /*#__PURE__*/_jsx(ErrorBoundary, {\n    hasError: error != null,\n    componentProps: error,\n    api: apiRef,\n    logger: logger,\n    render: errorProps => {\n      var _rootProps$components;\n\n      return /*#__PURE__*/_jsx(GridMainContainer, {\n        children: /*#__PURE__*/_jsx(rootProps.components.ErrorOverlay, _extends({}, errorProps, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.errorOverlay))\n      });\n    },\n    children: children\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridErrorHandler.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  children: PropTypes.node\n} : void 0;\nexport { GridErrorHandler };"]},"metadata":{},"sourceType":"module"}