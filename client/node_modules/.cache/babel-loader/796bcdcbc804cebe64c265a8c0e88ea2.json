{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport questions from \"../Helpers/data\";\nimport { shuffleAnswers } from \"../Helpers/shuffleAnswers\";\nconst quizSlice = createSlice({\n  name: \"quiz\",\n  initialState: {\n    questions,\n    currentQuestionIndex: 0,\n    showResults: false,\n    correctAnswerCount: 0,\n    answers: shuffleAnswers(questions[0]),\n    currentAnswer: \"\"\n  },\n  reducers: {\n    getQuestions: (state, action) => {\n      return state;\n    },\n    nextQuestion: state => {\n      const showResults = state.currentQuestionIndex === state.questions.length - 1;\n      const currentQuestionIndex = showResults ? state.currentQuestionIndex : state.currentQuestionIndex + 1;\n      const answers = showResults ? [] : shuffleAnswers(state.questions[currentQuestionIndex]);\n      return { ...state,\n        currentQuestionIndex,\n        showResults,\n        answers,\n        currentAnswer: \"\"\n      };\n    },\n    selectedAnswer: (state, action) => {\n      const correctAnswerCount = action.payload === state.questions[state.currentQuestionIndex].correctAnswer ? state.correctAnswerCount + 1 : state.correctAnswerCount;\n      return { ...state,\n        currentAnswer: action.payload,\n        correctAnswerCount\n      };\n    },\n    restart: () => {\n      return {\n        questions,\n        currentQuestionIndex: 0,\n        showResults: false,\n        correctAnswerCount: 0,\n        answers: shuffleAnswers(questions[0]),\n        currentAnswer: \"\"\n      };\n    }\n  }\n});\nexport const {\n  getQuestions,\n  nextQuestion,\n  selectedAnswer,\n  restart\n} = quizSlice.actions;\nexport default quizSlice.reducer;","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/src/redux/quizSlice.js"],"names":["createSlice","questions","shuffleAnswers","quizSlice","name","initialState","currentQuestionIndex","showResults","correctAnswerCount","answers","currentAnswer","reducers","getQuestions","state","action","nextQuestion","length","selectedAnswer","payload","correctAnswer","restart","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAE;AACZJ,IAAAA,SADY;AAEZK,IAAAA,oBAAoB,EAAE,CAFV;AAGZC,IAAAA,WAAW,EAAE,KAHD;AAIZC,IAAAA,kBAAkB,EAAE,CAJR;AAKZC,IAAAA,OAAO,EAAEP,cAAc,CAACD,SAAS,CAAC,CAAD,CAAV,CALX;AAMZS,IAAAA,aAAa,EAAE;AANH,GAFc;AAU5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,aAAOD,KAAP;AACD,KAHO;AAIRE,IAAAA,YAAY,EAAGF,KAAD,IAAW;AACvB,YAAMN,WAAW,GACfM,KAAK,CAACP,oBAAN,KAA+BO,KAAK,CAACZ,SAAN,CAAgBe,MAAhB,GAAyB,CAD1D;AAGA,YAAMV,oBAAoB,GAAGC,WAAW,GACpCM,KAAK,CAACP,oBAD8B,GAEpCO,KAAK,CAACP,oBAAN,GAA6B,CAFjC;AAIA,YAAMG,OAAO,GAAGF,WAAW,GACvB,EADuB,GAEvBL,cAAc,CAACW,KAAK,CAACZ,SAAN,CAAgBK,oBAAhB,CAAD,CAFlB;AAIA,aAAO,EACL,GAAGO,KADE;AAELP,QAAAA,oBAFK;AAGLC,QAAAA,WAHK;AAILE,QAAAA,OAJK;AAKLC,QAAAA,aAAa,EAAE;AALV,OAAP;AAOD,KAvBO;AAwBRO,IAAAA,cAAc,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMN,kBAAkB,GACtBM,MAAM,CAACI,OAAP,KACAL,KAAK,CAACZ,SAAN,CAAgBY,KAAK,CAACP,oBAAtB,EAA4Ca,aAD5C,GAEIN,KAAK,CAACL,kBAAN,GAA2B,CAF/B,GAGIK,KAAK,CAACL,kBAJZ;AAKA,aAAO,EACL,GAAGK,KADE;AAELH,QAAAA,aAAa,EAAEI,MAAM,CAACI,OAFjB;AAGLV,QAAAA;AAHK,OAAP;AAKD,KAnCO;AAoCRY,IAAAA,OAAO,EAAE,MAAM;AACb,aAAO;AACLnB,QAAAA,SADK;AAELK,QAAAA,oBAAoB,EAAE,CAFjB;AAGLC,QAAAA,WAAW,EAAE,KAHR;AAILC,QAAAA,kBAAkB,EAAE,CAJf;AAKLC,QAAAA,OAAO,EAAEP,cAAc,CAACD,SAAS,CAAC,CAAD,CAAV,CALlB;AAMLS,QAAAA,aAAa,EAAE;AANV,OAAP;AAQD;AA7CO;AAVkB,CAAD,CAA7B;AA2DA,OAAO,MAAM;AAAEE,EAAAA,YAAF;AAAgBG,EAAAA,YAAhB;AAA8BE,EAAAA,cAA9B;AAA8CG,EAAAA;AAA9C,IACXjB,SAAS,CAACkB,OADL;AAEP,eAAelB,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport questions from \"../Helpers/data\";\nimport { shuffleAnswers } from \"../Helpers/shuffleAnswers\";\nconst quizSlice = createSlice({\n  name: \"quiz\",\n  initialState: {\n    questions,\n    currentQuestionIndex: 0,\n    showResults: false,\n    correctAnswerCount: 0,\n    answers: shuffleAnswers(questions[0]),\n    currentAnswer: \"\",\n  },\n  reducers: {\n    getQuestions: (state, action) => {\n      return state;\n    },\n    nextQuestion: (state) => {\n      const showResults =\n        state.currentQuestionIndex === state.questions.length - 1;\n\n      const currentQuestionIndex = showResults\n        ? state.currentQuestionIndex\n        : state.currentQuestionIndex + 1;\n\n      const answers = showResults\n        ? []\n        : shuffleAnswers(state.questions[currentQuestionIndex]);\n\n      return {\n        ...state,\n        currentQuestionIndex,\n        showResults,\n        answers,\n        currentAnswer: \"\",\n      };\n    },\n    selectedAnswer: (state, action) => {\n      const correctAnswerCount =\n        action.payload ===\n        state.questions[state.currentQuestionIndex].correctAnswer\n          ? state.correctAnswerCount + 1\n          : state.correctAnswerCount;\n      return {\n        ...state,\n        currentAnswer: action.payload,\n        correctAnswerCount,\n      };\n    },\n    restart: () => {\n      return {\n        questions,\n        currentQuestionIndex: 0,\n        showResults: false,\n        correctAnswerCount: 0,\n        answers: shuffleAnswers(questions[0]),\n        currentAnswer: \"\",\n      };\n    },\n  },\n});\n\nexport const { getQuestions, nextQuestion, selectedAnswer, restart } =\n  quizSlice.actions;\nexport default quizSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}