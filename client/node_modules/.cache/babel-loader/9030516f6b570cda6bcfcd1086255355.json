{"ast":null,"code":"import * as React from 'react';\nexport class ErrorBoundary extends React.Component {\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true,\n      error\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    if (this.props.api.current) {\n      this.logError(error); // Allows to trigger the Error event and all listener can run on Error\n\n      this.props.api.current.showError({\n        error,\n        errorInfo\n      });\n    }\n  }\n\n  logError(error, errorInfo) {\n    this.props.logger.error(`An unexpected error occurred. Error: ${error && error.message}. `, error, errorInfo);\n  }\n\n  render() {\n    var _this$state;\n\n    if (this.props.hasError || (_this$state = this.state) != null && _this$state.hasError) {\n      // You can render any custom fallback UI\n      return this.props.render(this.props.componentProps || this.state);\n    }\n\n    return this.props.children;\n  }\n\n}","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/components/ErrorBoundary.js"],"names":["React","ErrorBoundary","Component","getDerivedStateFromError","error","hasError","componentDidCatch","errorInfo","props","api","current","logError","showError","logger","message","render","_this$state","state","componentProps","children"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AAClB,SAAxBC,wBAAwB,CAACC,KAAD,EAAQ;AACrC;AACA,WAAO;AACLC,MAAAA,QAAQ,EAAE,IADL;AAELD,MAAAA;AAFK,KAAP;AAID;;AAEDE,EAAAA,iBAAiB,CAACF,KAAD,EAAQG,SAAR,EAAmB;AAClC,QAAI,KAAKC,KAAL,CAAWC,GAAX,CAAeC,OAAnB,EAA4B;AAC1B,WAAKC,QAAL,CAAcP,KAAd,EAD0B,CACJ;;AAEtB,WAAKI,KAAL,CAAWC,GAAX,CAAeC,OAAf,CAAuBE,SAAvB,CAAiC;AAC/BR,QAAAA,KAD+B;AAE/BG,QAAAA;AAF+B,OAAjC;AAID;AACF;;AAEDI,EAAAA,QAAQ,CAACP,KAAD,EAAQG,SAAR,EAAmB;AACzB,SAAKC,KAAL,CAAWK,MAAX,CAAkBT,KAAlB,CAAyB,wCAAuCA,KAAK,IAAIA,KAAK,CAACU,OAAQ,IAAvF,EAA4FV,KAA5F,EAAmGG,SAAnG;AACD;;AAEDQ,EAAAA,MAAM,GAAG;AACP,QAAIC,WAAJ;;AAEA,QAAI,KAAKR,KAAL,CAAWH,QAAX,IAAuB,CAACW,WAAW,GAAG,KAAKC,KAApB,KAA8B,IAA9B,IAAsCD,WAAW,CAACX,QAA7E,EAAuF;AACrF;AACA,aAAO,KAAKG,KAAL,CAAWO,MAAX,CAAkB,KAAKP,KAAL,CAAWU,cAAX,IAA6B,KAAKD,KAApD,CAAP;AACD;;AAED,WAAO,KAAKT,KAAL,CAAWW,QAAlB;AACD;;AAjCgD","sourcesContent":["import * as React from 'react';\nexport class ErrorBoundary extends React.Component {\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true,\n      error\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    if (this.props.api.current) {\n      this.logError(error); // Allows to trigger the Error event and all listener can run on Error\n\n      this.props.api.current.showError({\n        error,\n        errorInfo\n      });\n    }\n  }\n\n  logError(error, errorInfo) {\n    this.props.logger.error(`An unexpected error occurred. Error: ${error && error.message}. `, error, errorInfo);\n  }\n\n  render() {\n    var _this$state;\n\n    if (this.props.hasError || (_this$state = this.state) != null && _this$state.hasError) {\n      // You can render any custom fallback UI\n      return this.props.render(this.props.componentProps || this.state);\n    }\n\n    return this.props.children;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}