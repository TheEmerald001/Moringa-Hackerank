{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"getValue\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\", \"initialOpen\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport MenuItem from '@mui/material/MenuItem';\nimport { isEscapeKey } from '../../utils/keyboardUtils';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridEditModes } from '../../models/gridEditRowModel';\nimport { getValueFromValueOptions } from '../panel/filterPanel/filterPanelUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst renderSingleSelectOptions = (option, OptionComponent) => {\n  const isOptionTypeObject = typeof option === 'object';\n  const key = isOptionTypeObject ? option.value : option;\n  const value = isOptionTypeObject ? option.value : option;\n  const content = isOptionTypeObject ? option.label : option;\n  return /*#__PURE__*/_jsx(OptionComponent, {\n    value: value,\n    children: content\n  }, key);\n};\n\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\n\nfunction GridEditSingleSelectCell(props) {\n  var _rootProps$components, _baseSelectProps$nati, _rootProps$components2;\n\n  const rootProps = useGridRootProps();\n\n  const {\n    id,\n    value,\n    api,\n    field,\n    row,\n    colDef,\n    hasFocus,\n    error,\n    onValueChange,\n    initialOpen = rootProps.editMode === GridEditModes.Cell\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const ref = React.useRef();\n  const inputRef = React.useRef();\n  const [open, setOpen] = React.useState(initialOpen);\n  const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};\n  const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : false;\n  let valueOptionsFormatted;\n\n  if (typeof colDef.valueOptions === 'function') {\n    valueOptionsFormatted = colDef.valueOptions({\n      id,\n      row,\n      field\n    });\n  } else {\n    valueOptionsFormatted = colDef.valueOptions;\n  }\n\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n\n      const params = {\n        field,\n        api,\n        value: option\n      };\n      return {\n        value: option,\n        label: String(colDef.valueFormatter(params))\n      };\n    });\n  }\n\n  const handleChange = async event => {\n    var _rootProps$experiment;\n\n    setOpen(false);\n    const target = event.target; // NativeSelect casts the value to a string.\n\n    const formattedTargetValue = getValueFromValueOptions(target.value, valueOptionsFormatted);\n\n    if (onValueChange) {\n      await onValueChange(event, formattedTargetValue);\n    }\n\n    const isValid = await apiRef.current.setEditCellValue({\n      id,\n      field,\n      value: formattedTargetValue\n    }, event);\n\n    if ((_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.newEditingApi) {\n      return;\n    } // We use isValid === false because the default return is undefined which evaluates to true with !isValid\n\n\n    if (rootProps.editMode === GridEditModes.Row || isValid === false) {\n      return;\n    }\n\n    const canCommit = await Promise.resolve(apiRef.current.commitCellChange({\n      id,\n      field\n    }, event));\n\n    if (canCommit) {\n      apiRef.current.setCellMode(id, field, 'view');\n\n      if (event.key) {\n        // TODO v6: remove once we stop ignoring events fired from portals\n        const params = apiRef.current.getCellParams(id, field);\n        apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n      }\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (rootProps.editMode === GridEditModes.Row) {\n      setOpen(false);\n      return;\n    }\n\n    if (reason === 'backdropClick' || isEscapeKey(event.key)) {\n      var _rootProps$experiment2;\n\n      if ((_rootProps$experiment2 = rootProps.experimentalFeatures) != null && _rootProps$experiment2.newEditingApi) {\n        apiRef.current.stopCellEditMode({\n          id,\n          field,\n          ignoreModifications: true\n        });\n      } else {\n        apiRef.current.setCellMode(id, field, 'view');\n      }\n    }\n  };\n\n  const handleOpen = event => {\n    if (isKeyboardEvent(event) && event.key === 'Enter') {\n      return;\n    }\n\n    setOpen(true);\n  };\n\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(rootProps.components.BaseSelect, _extends({\n    ref: ref,\n    inputRef: inputRef,\n    value: value,\n    onChange: handleChange,\n    open: open,\n    onOpen: handleOpen,\n    MenuProps: {\n      onClose: handleClose\n    },\n    error: error,\n    native: isSelectNative,\n    fullWidth: true\n  }, other, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect, {\n    children: valueOptionsFormatted.map(valueOptions => renderSingleSelectOptions(valueOptions, isSelectNative ? 'option' : MenuItem))\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditSingleSelectCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the select opens by default.\n   */\n  initialOpen: PropTypes.bool,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {SelectChangeEvent<any>} event The event source of the callback.\n   * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditSingleSelectCell };\nexport const renderEditSingleSelectCell = params => /*#__PURE__*/_jsx(GridEditSingleSelectCell, _extends({}, params));","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_useEnhancedEffect","useEnhancedEffect","MenuItem","isEscapeKey","useGridRootProps","GridEditModes","getValueFromValueOptions","useGridApiContext","jsx","_jsx","renderSingleSelectOptions","option","OptionComponent","isOptionTypeObject","key","value","content","label","children","isKeyboardEvent","event","GridEditSingleSelectCell","props","_rootProps$components","_baseSelectProps$nati","_rootProps$components2","rootProps","id","api","field","row","colDef","hasFocus","error","onValueChange","initialOpen","editMode","Cell","other","apiRef","ref","useRef","inputRef","open","setOpen","useState","baseSelectProps","componentsProps","baseSelect","isSelectNative","native","valueOptionsFormatted","valueOptions","valueFormatter","map","params","String","handleChange","_rootProps$experiment","target","formattedTargetValue","isValid","current","setEditCellValue","experimentalFeatures","newEditingApi","Row","canCommit","Promise","resolve","commitCellChange","setCellMode","getCellParams","publishEvent","handleClose","reason","_rootProps$experiment2","stopCellEditMode","ignoreModifications","handleOpen","focus","components","BaseSelect","onChange","onOpen","MenuProps","onClose","fullWidth","process","env","NODE_ENV","propTypes","any","isRequired","cellMode","oneOf","changeReason","object","string","formattedValue","getValue","func","bool","oneOfType","number","isEditable","isProcessingProps","isValidating","rowNode","tabIndex","renderEditSingleSelectCell"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"getValue\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\", \"initialOpen\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport MenuItem from '@mui/material/MenuItem';\nimport { isEscapeKey } from '../../utils/keyboardUtils';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridEditModes } from '../../models/gridEditRowModel';\nimport { getValueFromValueOptions } from '../panel/filterPanel/filterPanelUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst renderSingleSelectOptions = (option, OptionComponent) => {\n  const isOptionTypeObject = typeof option === 'object';\n  const key = isOptionTypeObject ? option.value : option;\n  const value = isOptionTypeObject ? option.value : option;\n  const content = isOptionTypeObject ? option.label : option;\n  return /*#__PURE__*/_jsx(OptionComponent, {\n    value: value,\n    children: content\n  }, key);\n};\n\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\n\nfunction GridEditSingleSelectCell(props) {\n  var _rootProps$components, _baseSelectProps$nati, _rootProps$components2;\n\n  const rootProps = useGridRootProps();\n\n  const {\n    id,\n    value,\n    api,\n    field,\n    row,\n    colDef,\n    hasFocus,\n    error,\n    onValueChange,\n    initialOpen = rootProps.editMode === GridEditModes.Cell\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const ref = React.useRef();\n  const inputRef = React.useRef();\n  const [open, setOpen] = React.useState(initialOpen);\n  const baseSelectProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect) || {};\n  const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : false;\n  let valueOptionsFormatted;\n\n  if (typeof colDef.valueOptions === 'function') {\n    valueOptionsFormatted = colDef.valueOptions({\n      id,\n      row,\n      field\n    });\n  } else {\n    valueOptionsFormatted = colDef.valueOptions;\n  }\n\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n\n      const params = {\n        field,\n        api,\n        value: option\n      };\n      return {\n        value: option,\n        label: String(colDef.valueFormatter(params))\n      };\n    });\n  }\n\n  const handleChange = async event => {\n    var _rootProps$experiment;\n\n    setOpen(false);\n    const target = event.target; // NativeSelect casts the value to a string.\n\n    const formattedTargetValue = getValueFromValueOptions(target.value, valueOptionsFormatted);\n\n    if (onValueChange) {\n      await onValueChange(event, formattedTargetValue);\n    }\n\n    const isValid = await apiRef.current.setEditCellValue({\n      id,\n      field,\n      value: formattedTargetValue\n    }, event);\n\n    if ((_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.newEditingApi) {\n      return;\n    } // We use isValid === false because the default return is undefined which evaluates to true with !isValid\n\n\n    if (rootProps.editMode === GridEditModes.Row || isValid === false) {\n      return;\n    }\n\n    const canCommit = await Promise.resolve(apiRef.current.commitCellChange({\n      id,\n      field\n    }, event));\n\n    if (canCommit) {\n      apiRef.current.setCellMode(id, field, 'view');\n\n      if (event.key) {\n        // TODO v6: remove once we stop ignoring events fired from portals\n        const params = apiRef.current.getCellParams(id, field);\n        apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n      }\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (rootProps.editMode === GridEditModes.Row) {\n      setOpen(false);\n      return;\n    }\n\n    if (reason === 'backdropClick' || isEscapeKey(event.key)) {\n      var _rootProps$experiment2;\n\n      if ((_rootProps$experiment2 = rootProps.experimentalFeatures) != null && _rootProps$experiment2.newEditingApi) {\n        apiRef.current.stopCellEditMode({\n          id,\n          field,\n          ignoreModifications: true\n        });\n      } else {\n        apiRef.current.setCellMode(id, field, 'view');\n      }\n    }\n  };\n\n  const handleOpen = event => {\n    if (isKeyboardEvent(event) && event.key === 'Enter') {\n      return;\n    }\n\n    setOpen(true);\n  };\n\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(rootProps.components.BaseSelect, _extends({\n    ref: ref,\n    inputRef: inputRef,\n    value: value,\n    onChange: handleChange,\n    open: open,\n    onOpen: handleOpen,\n    MenuProps: {\n      onClose: handleClose\n    },\n    error: error,\n    native: isSelectNative,\n    fullWidth: true\n  }, other, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect, {\n    children: valueOptionsFormatted.map(valueOptions => renderSingleSelectOptions(valueOptions, isSelectNative ? 'option' : MenuItem))\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditSingleSelectCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the select opens by default.\n   */\n  initialOpen: PropTypes.bool,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {SelectChangeEvent<any>} event The event source of the callback.\n   * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditSingleSelectCell };\nexport const renderEditSingleSelectCell = params => /*#__PURE__*/_jsx(GridEditSingleSelectCell, _extends({}, params));"]},"metadata":{},"sourceType":"module"}