{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { gridVisibleSortedRowEntriesSelector, gridVisibleSortedRowIdsSelector, gridVisibleSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n/**\n * @category Pagination\n * @ignore - do not document.\n */\n\nexport const gridPaginationSelector = state => state.pagination;\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSelector = createSelector(gridPaginationSelector, pagination => pagination.page);\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSizeSelector = createSelector(gridPaginationSelector, pagination => pagination.pageSize);\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageCountSelector = createSelector(gridPaginationSelector, pagination => pagination.pageCount);\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginationRowRangeSelector = createSelector(gridPaginationSelector, gridRowTreeSelector, gridRowTreeDepthSelector, gridVisibleSortedRowEntriesSelector, gridVisibleSortedTopLevelRowEntriesSelector, (pagination, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(pagination.pageSize * pagination.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + pagination.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element\n\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  } // The tree is flat, there is no need to look for children\n\n\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id].depth;\n\n    if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n      lastRowIndex += 1;\n    }\n\n    if (depth === 0) {\n      topLevelRowAdded += 1;\n    }\n  }\n\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector(gridVisibleSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelector(gridVisibleSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js"],"names":["createSelector","gridVisibleSortedRowEntriesSelector","gridVisibleSortedRowIdsSelector","gridVisibleSortedTopLevelRowEntriesSelector","gridRowTreeDepthSelector","gridRowTreeSelector","gridPaginationSelector","state","pagination","gridPageSelector","page","gridPageSizeSelector","pageSize","gridPageCountSelector","pageCount","gridPaginationRowRangeSelector","rowTree","rowTreeDepth","visibleSortedRowEntries","visibleSortedTopLevelRowEntries","visibleTopLevelRowCount","length","topLevelFirstRowIndex","Math","min","topLevelLastRowIndex","firstRowIndex","lastRowIndex","topLevelFirstRow","topLevelRowsInCurrentPageCount","findIndex","row","id","topLevelRowAdded","depth","gridPaginatedVisibleSortedGridRowEntriesSelector","paginationRange","slice","gridPaginatedVisibleSortedGridRowIdsSelector","visibleSortedRowIds"],"mappings":"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","sourcesContent":["import { createSelector } from '../../../utils/createSelector';\nimport { gridVisibleSortedRowEntriesSelector, gridVisibleSortedRowIdsSelector, gridVisibleSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n/**\n * @category Pagination\n * @ignore - do not document.\n */\n\nexport const gridPaginationSelector = state => state.pagination;\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSelector = createSelector(gridPaginationSelector, pagination => pagination.page);\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSizeSelector = createSelector(gridPaginationSelector, pagination => pagination.pageSize);\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageCountSelector = createSelector(gridPaginationSelector, pagination => pagination.pageCount);\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginationRowRangeSelector = createSelector(gridPaginationSelector, gridRowTreeSelector, gridRowTreeDepthSelector, gridVisibleSortedRowEntriesSelector, gridVisibleSortedTopLevelRowEntriesSelector, (pagination, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(pagination.pageSize * pagination.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + pagination.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element\n\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  } // The tree is flat, there is no need to look for children\n\n\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id].depth;\n\n    if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n      lastRowIndex += 1;\n    }\n\n    if (depth === 0) {\n      topLevelRowAdded += 1;\n    }\n  }\n\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector(gridVisibleSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelector(gridVisibleSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});"]},"metadata":{},"sourceType":"module"}