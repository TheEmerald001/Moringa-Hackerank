{"ast":null,"code":"import * as React from 'react';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridVisibleSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\n\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\n\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.unstable_moveFocusToRelativeCell()\n   */\n\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left') => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    } // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n\n\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex].id;\n  }, [currentPageRows]);\n  const handleCellNavigationKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'Enter':\n        {\n          // TODO v6: Remove Enter case because `cellNavigationKeyDown` is not fired by the new editing API\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          const field = params.field;\n\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n\n          const colDef = params.colDef;\n\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToHeader(colIndexBefore + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToHeader(colIndexBefore - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.cellMode !== GridCellModes.Edit && isNavigationKey(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', cellParams, event);\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellNavigationKeyDown', handleCellNavigationKeyDown);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"names":["React","gridVisibleColumnDefinitionsSelector","useGridLogger","useGridApiEventHandler","gridVisibleSortedRowEntriesSelector","useGridVisibleRows","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","GridCellModes","isNavigationKey","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridPinnedRowsSelector","enrichPageRowsWithPinnedRows","apiRef","rows","pinnedRows","top","bottom","useGridKeyboardNavigation","props","logger","initialCurrentPageRows","currentPageRows","useMemo","goToCell","useCallback","colIndex","rowId","closestColumnToUse","visibleSortedRows","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","rowIndexRelativeToAllRows","findIndex","row","id","debug","scrollToIndexes","rowIndex","field","getVisibleColumns","setCellFocus","goToHeader","event","setColumnHeaderFocus","getRowIdFromIndex","handleCellNavigationKeyDown","params","dimensions","getRootDimensions","length","viewportPageSize","unstable_getViewportPageSize","colIndexBefore","getColumnIndex","rowIndexBefore","firstRowIndexInPage","lastRowIndexInPage","firstColIndex","lastColIndex","shouldPreventDefault","key","shiftKey","colDef","type","Math","min","nextRowIndex","max","ctrlKey","metaKey","preventDefault","handleColumnHeaderKeyDown","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","toggleColumnMenu","handleCellKeyDown","cellParams","getCellParams","cellMode","Edit","publishEvent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridVisibleSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\n\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\n\n\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.unstable_moveFocusToRelativeCell()\n   */\n\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left') => {\n    const visibleSortedRows = gridVisibleSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    } // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n\n\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    return currentPageRows[rowIndex].id;\n  }, [currentPageRows]);\n  const handleCellNavigationKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'Enter':\n        {\n          // TODO v6: Remove Enter case because `cellNavigationKeyDown` is not fired by the new editing API\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          const field = params.field;\n\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n\n          const colDef = params.colDef;\n\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return;\n    }\n\n    const viewportPageSize = apiRef.current.unstable_getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n          }\n\n          break;\n        }\n\n      case 'ArrowRight':\n        {\n          if (colIndexBefore < lastColIndex) {\n            goToHeader(colIndexBefore + 1, event);\n          }\n\n          break;\n        }\n\n      case 'ArrowLeft':\n        {\n          if (colIndexBefore > firstColIndex) {\n            goToHeader(colIndexBefore - 1, event);\n          }\n\n          break;\n        }\n\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n\n          break;\n        }\n\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n\n          break;\n        }\n\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, goToCell, goToHeader, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n\n    if (cellParams.cellMode !== GridCellModes.Edit && isNavigationKey(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', cellParams, event);\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellNavigationKeyDown', handleCellNavigationKeyDown);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};"]},"metadata":{},"sourceType":"module"}