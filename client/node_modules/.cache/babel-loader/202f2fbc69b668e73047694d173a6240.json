{"ast":null,"code":"import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (event.key === ' ' && event.shiftKey) {\n        return; // Shift + Space is used to select the row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('18')) {\n        startRowEditModeParams.initialValue = key; // In React 17, cleaning the input is enough\n      } else {\n        startRowEditModeParams.deleteValue = !!field;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      let newValue = apiRef.current.getCellValue(id, field);\n\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js"],"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","gridRowsIdToIdLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","rowModesModel","setRowModesModel","useState","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","signature","runIfEditModeIsRow","callback","args","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","version","startsWith","initialValue","deleteValue","startRowEditMode","handleRowEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","disableIgnoreModificationsIfProcessingProps","Object","values","some","fieldProps","isProcessingProps","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","other","updateStateToStartRowEditMode","reduce","acc","cellParams","newValue","getCellValue","value","error","setCellFocus","updateStateToStopRowEditMode","focusedField","finishRowEditMode","unstable_moveFocusToRelativeCell","row","isSomeFieldProcessingProps","hasSomeFieldWithError","rowUpdate","unstable_getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","column","getColumn","parsedValue","valueParser","changeReason","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","thisField","fieldColumn","_editingState$id2","all","getRowWithUpdatedValuesFromRowEditing","valueSetter","editingApi","unstable_setRowEditingEditCellValue","idToIdLookup","copyOfPrevRowModesModel","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"mappings":"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","sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (event.key === ' ' && event.shiftKey) {\n        return; // Shift + Space is used to select the row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('18')) {\n        startRowEditModeParams.initialValue = key; // In React 17, cleaning the input is enough\n      } else {\n        startRowEditModeParams.deleteValue = !!field;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      let newValue = apiRef.current.getCellValue(id, field);\n\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n      }\n\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"]},"metadata":{},"sourceType":"module"}