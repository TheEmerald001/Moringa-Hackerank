{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const selectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n\n  return _extends({}, state, {\n    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.selectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: 'selectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if ((rowNode == null ? void 0 : rowNode.position) === 'footer' || rowNode != null && rowNode.isPinned) {\n      return false;\n    }\n\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (disableSelectionOnClick) {\n      return;\n    }\n\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (params.field) {\n      const column = apiRef.current.getColumn(params.field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    if (params.rowNode.isPinned) {\n      return;\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, 'cellClick', handleCellClick);\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // props.isRowSelectable changed\n\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, {\n        id\n      }) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/selection/useGridSelection.js"],"names":["_extends","React","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridVisibleSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","getVisibleRows","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","selectionStateInitializer","state","props","_getSelectionModelPro","selection","selectionModel","useGridSelection","apiRef","logger","propSelectionModel","useMemo","current","lastRowToggled","useRef","unstable_registerControlState","stateId","propModel","propOnChange","onSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableMultipleSelection","disableSelectionOnClick","pagination","paginationMode","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setSelectionModel","model","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","position","isPinned","getSelectedRows","selectRow","resetSelection","newSelection","filter","el","push","isSelectionValid","length","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleCellClick","params","field","column","getColumn","type","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","rowsToBeSelected","handleCellKeyDown","getCellMode","Edit","currentTarget","contains","target","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","toLowerCase","getAllRowIds","useEffect","undefined","isStateControlled","currentPageRows","currentPageRowsLookup","reduce","acc","firstSelectableRow","find","isSelectable"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { getVisibleRows, useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const selectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n\n  return _extends({}, state, {\n    selection: (_getSelectionModelPro = getSelectionModelPropValue(props.selectionModel)) != null ? _getSelectionModelPro : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const propSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.selectionModel, gridSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.selectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'selection',\n    propModel: propSelectionModel,\n    propOnChange: props.onSelectionModelChange,\n    stateSelector: gridSelectionStateSelector,\n    changeEvent: 'selectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleSelection,\n    disableSelectionOnClick,\n    pagination,\n    paginationMode,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setSelectionModel = React.useCallback(model => {\n    const currentModel = gridSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        selection: model\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const isRowSelected = React.useCallback(id => gridSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if ((rowNode == null ? void 0 : rowNode.position) === 'footer' || rowNode != null && rowNode.isPinned) {\n      return false;\n    }\n\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridVisibleSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionApi = {\n    selectRow,\n    selectRows,\n    selectRowRange,\n    setSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  useGridApiMethod(apiRef, selectionApi, 'GridSelectionApi');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleCellClick = React.useCallback((params, event) => {\n    if (disableSelectionOnClick) {\n      return;\n    }\n\n    if (params.field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (params.field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (params.field) {\n      const column = apiRef.current.getColumn(params.field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    if (params.rowNode.isPinned) {\n      return;\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridVisibleSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key.toLowerCase() === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', removeOutdatedSelection);\n  useGridApiEventHandler(apiRef, 'cellClick', handleCellClick);\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', handleRowSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', preventSelectionOnShift);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propSelectionModel !== undefined) {\n      apiRef.current.setSelectionModel(propSelectionModel);\n    }\n  }, [apiRef, propSelectionModel]);\n  const isStateControlled = propSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled) {\n      return;\n    } // props.isRowSelectable changed\n\n\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled]);\n  React.useEffect(() => {\n    const currentSelection = gridSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      const {\n        rows: currentPageRows\n      } = getVisibleRows(apiRef, {\n        pagination,\n        paginationMode\n      });\n      const currentPageRowsLookup = currentPageRows.reduce((acc, {\n        id\n      }) => {\n        acc[id] = true;\n        return acc;\n      }, {});\n      const firstSelectableRow = currentSelection.find(id => {\n        let isSelectable = true;\n\n        if (isRowSelectable) {\n          isSelectable = isRowSelectable(id);\n        }\n\n        return isSelectable && currentPageRowsLookup[id]; // Check if the row is in the current page\n      });\n      apiRef.current.setSelectionModel(firstSelectableRow !== undefined ? [firstSelectableRow] : []);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, disableMultipleSelection, isRowSelectable, pagination, paginationMode]);\n};"]},"metadata":{},"sourceType":"module"}