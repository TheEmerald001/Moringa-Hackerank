{"ast":null,"code":"import * as React from 'react';\nimport { debounce, ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityTotalHeaderHeightSelector, gridDensityRowHeightSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\n\nconst hasScroll = ({\n  content,\n  container,\n  scrollBarSize\n}) => {\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.\n\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\n\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n\n    let scrollBarSize;\n\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - totalHeaderHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: {\n          width: viewportOuterSize.width,\n          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom\n        },\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, totalHeaderHeight, rowsMeta.currentPageTotalHeight]);\n  const resize = React.useCallback(() => {\n    updateGridDimensionsRef();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, [apiRef, updateGridDimensionsRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return 0;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.unstable_getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / gridDensityRowHeightSelector(apiRef));\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions,\n    unstable_getViewportPageSize: getViewportPageSize,\n    unstable_updateGridDimensionsRef: updateGridDimensionsRef\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'GridDimensionsApi');\n  const debounceResize = React.useMemo(() => debounce(resize, 60), [resize]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size; // jsdom has no layout capabilities\n\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    debounceResize();\n  }, [props.autoHeight, debounceResize, logger, resize]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageSizeChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"names":["React","debounce","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridColumnsTotalWidthSelector","gridDensityTotalHeaderHeightSelector","gridDensityRowHeightSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","calculatePinnedRowsHeight","isTestEnvironment","process","env","NODE_ENV","hasScroll","content","container","scrollBarSize","hasScrollXIfNoYScrollBar","width","hasScrollYIfNoXScrollBar","height","hasScrollX","hasScrollY","useGridDimensions","apiRef","props","logger","errorShown","useRef","rootDimensionsRef","fullDimensionsRef","rowsMeta","totalHeaderHeight","updateGridDimensionsRef","useCallback","_apiRef$current$rootE","rootElement","current","rootElementRef","columnsTotalWidth","pinnedRowsHeight","scrollbarSize","doc","scrollDiv","createElement","style","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","viewportOuterSize","autoHeight","Math","round","currentPageTotalHeight","scrollInformation","top","bottom","viewportInnerSize","newFullDimensions","prevDimensions","publishEvent","resize","getRootDimensions","getViewportPageSize","dimensions","currentPage","pagination","paginationMode","getRowHeight","renderContext","unstable_getRenderContext","viewportPageSize","lastRowIndex","firstRowIndex","min","rows","length","maximumPageSizeWithoutScrollBar","floor","dimensionsApi","unstable_getViewportPageSize","unstable_updateGridDimensionsRef","debounceResize","useMemo","isFirstSizing","handleResize","size","isJSDOM","test","window","navigator","userAgent","error","join","onResize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { debounce, ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityTotalHeaderHeightSelector, gridDensityRowHeightSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\n\nconst hasScroll = ({\n  content,\n  container,\n  scrollBarSize\n}) => {\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.\n\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\n\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const totalHeaderHeight = useGridSelector(apiRef, gridDensityTotalHeaderHeightSelector);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n\n    let scrollBarSize;\n\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - totalHeaderHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: {\n          width: viewportOuterSize.width,\n          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom\n        },\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, totalHeaderHeight, rowsMeta.currentPageTotalHeight]);\n  const resize = React.useCallback(() => {\n    updateGridDimensionsRef();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, [apiRef, updateGridDimensionsRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return 0;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.unstable_getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / gridDensityRowHeightSelector(apiRef));\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions,\n    unstable_getViewportPageSize: getViewportPageSize,\n    unstable_updateGridDimensionsRef: updateGridDimensionsRef\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'GridDimensionsApi');\n  const debounceResize = React.useMemo(() => debounce(resize, 60), [resize]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size; // jsdom has no layout capabilities\n\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    debounceResize();\n  }, [props.autoHeight, debounceResize, logger, resize]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageSizeChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}"]},"metadata":{},"sourceType":"module"}