{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\n\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\n\nlet globalId = 0;\nexport function useGridApiInitialization(inputApiRef, props) {\n  const apiRef = React.useRef();\n\n  if (!apiRef.current) {\n    apiRef.current = {\n      unstable_eventManager: new EventManager(),\n      unstable_caches: {},\n      state: {},\n      instanceId: globalId\n    };\n    globalId += 1;\n  }\n\n  React.useImperativeHandle(inputApiRef, () => apiRef.current, [apiRef]);\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: apiRef.current\n    } : {};\n    apiRef.current.unstable_eventManager.emit(name, params, event, details);\n  }, [apiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    apiRef.current.unstable_eventManager.on(event, handler, options);\n    const api = apiRef.current;\n    return () => {\n      api.unstable_eventManager.removeListener(event, handler);\n    };\n  }, [apiRef]);\n  const showError = React.useCallback(args => {\n    apiRef.current.publishEvent('componentError', args);\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    subscribeEvent,\n    publishEvent,\n    showError\n  }, 'GridCoreApi');\n  React.useEffect(() => {\n    const api = apiRef.current;\n    return () => {\n      api.publishEvent('unmount');\n    };\n  }, [apiRef]);\n  return apiRef;\n}","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js"],"names":["React","useGridApiMethod","GridSignature","EventManager","isSyntheticEvent","event","isPropagationStopped","undefined","globalId","useGridApiInitialization","inputApiRef","props","apiRef","useRef","current","unstable_eventManager","unstable_caches","state","instanceId","useImperativeHandle","publishEvent","useCallback","args","name","params","defaultMuiPrevented","details","signature","DataGridPro","api","emit","subscribeEvent","handler","options","on","removeListener","showError","useEffect"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAChC,SAAOA,KAAK,CAACC,oBAAN,KAA+BC,SAAtC;AACD,CAFD;;AAIA,IAAIC,QAAQ,GAAG,CAAf;AACA,OAAO,SAASC,wBAAT,CAAkCC,WAAlC,EAA+CC,KAA/C,EAAsD;AAC3D,QAAMC,MAAM,GAAGZ,KAAK,CAACa,MAAN,EAAf;;AAEA,MAAI,CAACD,MAAM,CAACE,OAAZ,EAAqB;AACnBF,IAAAA,MAAM,CAACE,OAAP,GAAiB;AACfC,MAAAA,qBAAqB,EAAE,IAAIZ,YAAJ,EADR;AAEfa,MAAAA,eAAe,EAAE,EAFF;AAGfC,MAAAA,KAAK,EAAE,EAHQ;AAIfC,MAAAA,UAAU,EAAEV;AAJG,KAAjB;AAMAA,IAAAA,QAAQ,IAAI,CAAZ;AACD;;AAEDR,EAAAA,KAAK,CAACmB,mBAAN,CAA0BT,WAA1B,EAAuC,MAAME,MAAM,CAACE,OAApD,EAA6D,CAACF,MAAD,CAA7D;AACA,QAAMQ,YAAY,GAAGpB,KAAK,CAACqB,WAAN,CAAkB,CAAC,GAAGC,IAAJ,KAAa;AAClD,UAAM,CAACC,IAAD,EAAOC,MAAP,EAAenB,KAAK,GAAG,EAAvB,IAA6BiB,IAAnC;AACAjB,IAAAA,KAAK,CAACoB,mBAAN,GAA4B,KAA5B;;AAEA,QAAIrB,gBAAgB,CAACC,KAAD,CAAhB,IAA2BA,KAAK,CAACC,oBAAN,EAA/B,EAA6D;AAC3D;AACD;;AAED,UAAMoB,OAAO,GAAGf,KAAK,CAACgB,SAAN,KAAoBzB,aAAa,CAAC0B,WAAlC,GAAgD;AAC9DC,MAAAA,GAAG,EAAEjB,MAAM,CAACE;AADkD,KAAhD,GAEZ,EAFJ;AAGAF,IAAAA,MAAM,CAACE,OAAP,CAAeC,qBAAf,CAAqCe,IAArC,CAA0CP,IAA1C,EAAgDC,MAAhD,EAAwDnB,KAAxD,EAA+DqB,OAA/D;AACD,GAZoB,EAYlB,CAACd,MAAD,EAASD,KAAK,CAACgB,SAAf,CAZkB,CAArB;AAaA,QAAMI,cAAc,GAAG/B,KAAK,CAACqB,WAAN,CAAkB,CAAChB,KAAD,EAAQ2B,OAAR,EAAiBC,OAAjB,KAA6B;AACpErB,IAAAA,MAAM,CAACE,OAAP,CAAeC,qBAAf,CAAqCmB,EAArC,CAAwC7B,KAAxC,EAA+C2B,OAA/C,EAAwDC,OAAxD;AACA,UAAMJ,GAAG,GAAGjB,MAAM,CAACE,OAAnB;AACA,WAAO,MAAM;AACXe,MAAAA,GAAG,CAACd,qBAAJ,CAA0BoB,cAA1B,CAAyC9B,KAAzC,EAAgD2B,OAAhD;AACD,KAFD;AAGD,GANsB,EAMpB,CAACpB,MAAD,CANoB,CAAvB;AAOA,QAAMwB,SAAS,GAAGpC,KAAK,CAACqB,WAAN,CAAkBC,IAAI,IAAI;AAC1CV,IAAAA,MAAM,CAACE,OAAP,CAAeM,YAAf,CAA4B,gBAA5B,EAA8CE,IAA9C;AACD,GAFiB,EAEf,CAACV,MAAD,CAFe,CAAlB;AAGAX,EAAAA,gBAAgB,CAACW,MAAD,EAAS;AACvBmB,IAAAA,cADuB;AAEvBX,IAAAA,YAFuB;AAGvBgB,IAAAA;AAHuB,GAAT,EAIb,aAJa,CAAhB;AAKApC,EAAAA,KAAK,CAACqC,SAAN,CAAgB,MAAM;AACpB,UAAMR,GAAG,GAAGjB,MAAM,CAACE,OAAnB;AACA,WAAO,MAAM;AACXe,MAAAA,GAAG,CAACT,YAAJ,CAAiB,SAAjB;AACD,KAFD;AAGD,GALD,EAKG,CAACR,MAAD,CALH;AAMA,SAAOA,MAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\n\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\n\nlet globalId = 0;\nexport function useGridApiInitialization(inputApiRef, props) {\n  const apiRef = React.useRef();\n\n  if (!apiRef.current) {\n    apiRef.current = {\n      unstable_eventManager: new EventManager(),\n      unstable_caches: {},\n      state: {},\n      instanceId: globalId\n    };\n    globalId += 1;\n  }\n\n  React.useImperativeHandle(inputApiRef, () => apiRef.current, [apiRef]);\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: apiRef.current\n    } : {};\n    apiRef.current.unstable_eventManager.emit(name, params, event, details);\n  }, [apiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    apiRef.current.unstable_eventManager.on(event, handler, options);\n    const api = apiRef.current;\n    return () => {\n      api.unstable_eventManager.removeListener(event, handler);\n    };\n  }, [apiRef]);\n  const showError = React.useCallback(args => {\n    apiRef.current.publishEvent('componentError', args);\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    subscribeEvent,\n    publishEvent,\n    showError\n  }, 'GridCoreApi');\n  React.useEffect(() => {\n    const api = apiRef.current;\n    return () => {\n      api.publishEvent('unmount');\n    };\n  }, [apiRef]);\n  return apiRef;\n}"]},"metadata":{},"sourceType":"module"}