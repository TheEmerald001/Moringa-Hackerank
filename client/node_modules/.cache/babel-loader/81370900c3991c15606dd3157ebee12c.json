{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isPrintableKey, isCellEnterEditModeKeys, isCellExitEditModeKeys, isCellEditCommitKeys, isDeleteKeys } from '../../../utils/keyboardUtils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\n\nfunction isPromise(promise) {\n  return typeof promise.then === 'function';\n}\n\nexport const useCellEditing = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const setCellMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) === mode) {\n      return;\n    }\n\n    logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      newEditRowsState[id] = _extends({}, newEditRowsState[id]);\n\n      if (mode === GridCellModes.Edit) {\n        newEditRowsState[id][field] = {\n          value: apiRef.current.getCellValue(id, field)\n        };\n      } else {\n        delete newEditRowsState[id][field];\n\n        if (!Object.keys(newEditRowsState[id]).length) {\n          delete newEditRowsState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('cellModeChange', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const getCellMode = React.useCallback((id, field) => {\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editRowsState[id] && editRowsState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]); // TODO v6: it should always return a promise\n\n  const commitCellChange = React.useCallback((params, event = {}) => {\n    var _props$experimentalFe;\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    const model = apiRef.current.getEditRowsModel();\n\n    if (!model[id] || !model[id][field]) {\n      throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);\n    }\n\n    const editCellProps = model[id][field];\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const cellProps = model[id][field];\n\n      if (cellProps.isValidating || cellProps.error) {\n        return false;\n      }\n    }\n\n    const commitParams = _extends({}, params, {\n      value: editCellProps.value\n    });\n\n    let hasError = !!editCellProps.error;\n\n    if (!hasError && typeof column.preProcessEditCellProps === 'function') {\n      const result = column.preProcessEditCellProps({\n        id,\n        row,\n        props: editCellProps\n      });\n\n      if (isPromise(result)) {\n        return result.then(newEditCellProps => {\n          apiRef.current.unstable_setEditCellProps({\n            id,\n            field,\n            props: newEditCellProps\n          });\n\n          if (newEditCellProps.error) {\n            return false;\n          }\n\n          apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n          return true;\n        });\n      }\n\n      apiRef.current.unstable_setEditCellProps({\n        id,\n        field,\n        props: result\n      });\n      hasError = !!result.error;\n    }\n\n    if (!hasError) {\n      apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n      return true;\n    }\n\n    return false;\n  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setCellEditingEditCellValue = React.useCallback(params => {\n    const column = apiRef.current.getColumn(params.field);\n    const row = apiRef.current.getRow(params.id);\n    return new Promise(resolve => {\n      let newEditCellProps = {\n        value: params.value\n      };\n      const model = apiRef.current.getEditRowsModel();\n      const editCellProps = model[params.id][params.field];\n\n      if (typeof column.preProcessEditCellProps !== 'function') {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n        resolve(true);\n        return;\n      } // setEditCellProps runs the value parser and returns the updated props\n\n\n      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: _extends({}, editCellProps, {\n          isValidating: true\n        })\n      }));\n      Promise.resolve(column.preProcessEditCellProps({\n        id: params.id,\n        row,\n        props: _extends({}, newEditCellProps, {\n          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)\n        })\n      })).then(newEditCellPropsProcessed => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: _extends({}, newEditCellPropsProcessed, {\n            isValidating: false\n          })\n        }));\n        resolve(!newEditCellPropsProcessed.error);\n      });\n    });\n  }, [apiRef]);\n  const cellEditingApi = {\n    setCellMode,\n    getCellMode,\n    commitCellChange,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, cellEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    // Wait until IME is settled for Asian languages like Japanese and Chinese\n    // TODO: `event.which` is depricated but this is a temporary workaround\n    if (event.which === 229) {\n      return;\n    }\n\n    const {\n      id,\n      field,\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;\n\n    if (!isEditMode && isCellEnterEditModeKeys(event) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {\n      apiRef.current.publishEvent('cellEditStart', params, event);\n    }\n\n    if (!isEditMode && isDeleteKeys(event.key)) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      });\n      apiRef.current.commitCellChange({\n        id,\n        field\n      }, event);\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n\n    if (isEditMode && isCellEditCommitKeys(event.key)) {\n      const commitParams = {\n        id,\n        field\n      };\n      const isValid = await apiRef.current.commitCellChange(commitParams, event);\n\n      if (!isValid) {\n        return;\n      }\n    }\n\n    if (isEditMode && isCellExitEditModeKeys(event.key)) {\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellEditStart', params, event);\n  }, [apiRef]);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    await apiRef.current.commitCellChange(params, event);\n    apiRef.current.publishEvent('cellEditStop', params, event);\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  const handleCellEditStart = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);\n\n    if (isKeyboardEvent(event) && isPrintableKey(event)) {\n      apiRef.current.unstable_setEditCellProps({\n        id: params.id,\n        field: params.field,\n        props: {\n          value: ''\n        }\n      });\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback((params, event) => {\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);\n\n    if (!isKeyboardEvent(event)) {\n      return;\n    }\n\n    if (isCellEditCommitKeys(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n      return;\n    }\n\n    if (event.key === 'Escape' || isDeleteKeys(event.key)) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleCellEditCommit = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    const model = apiRef.current.getEditRowsModel();\n    const {\n      value\n    } = model[id][field];\n    logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      const column = apiRef.current.getColumn(params.field);\n\n      let rowUpdate = _extends({}, row, {\n        [field]: value\n      });\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          row,\n          value\n        });\n      }\n\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef, logger]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const column = apiRef.current.getColumn(params.field);\n    const editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({\n      id: params.id,\n      row,\n      props: params.props\n    }) : params.props;\n\n    if (isPromise(editCellProps)) {\n      editCellProps.then(newEditCellProps => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n      });\n    } else {\n      apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: editCellProps\n      }));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));\n  useGridApiEventHandler(apiRef, 'cellEditStart', buildCallback(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', buildCallback(handleCellEditStop));\n  useGridApiEventHandler(apiRef, 'cellEditCommit', buildCallback(handleCellEditCommit));\n  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));\n  useGridApiOptionHandler(apiRef, 'cellEditCommit', props.onCellEditCommit);\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n};","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.old.js"],"names":["_extends","React","useEventCallback","useGridApiOptionHandler","useGridApiEventHandler","GridCellModes","GridEditModes","isKeyboardEvent","isPrintableKey","isCellEnterEditModeKeys","isCellExitEditModeKeys","isCellEditCommitKeys","isDeleteKeys","useGridLogger","gridFocusCellSelector","useGridApiMethod","gridEditRowsStateSelector","isPromise","promise","then","useCellEditing","apiRef","props","_props$experimentalFe2","logger","buildCallback","callback","args","editMode","Cell","setCellMode","useCallback","id","field","mode","current","getCellMode","debug","setState","state","newEditRowsState","editRows","Edit","value","getCellValue","Object","keys","length","forceUpdate","publishEvent","getCellParams","editRowsState","isEditing","View","commitCellChange","params","event","_props$experimentalFe","unstable_runPendingEditCellValueMutation","model","getEditRowsModel","Error","editCellProps","column","getColumn","row","getRow","experimentalFeatures","preventCommitWhileValidating","cellProps","isValidating","error","commitParams","hasError","preProcessEditCellProps","result","newEditCellProps","unstable_setEditCellProps","setCellEditingEditCellValue","Promise","resolve","unstable_parseValue","newEditCellPropsProcessed","cellEditingApi","unstable_setCellEditingEditCellValue","handleCellKeyDown","which","cellMode","isEditable","isEditMode","isModifierKeyPressed","ctrlKey","metaKey","altKey","key","shiftKey","setEditCellValue","isValid","handleCellDoubleClick","commitPropsAndExit","handleCellFocusOut","handleColumnHeaderDragStart","cell","handleCellEditStart","handleCellEditStop","setCellFocus","handleCellEditCommit","toString","rowUpdate","valueSetter","updateRows","handleEditCellPropsChange","onCellEditCommit","onCellEditStart","onCellEditStop"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isPrintableKey, isCellEnterEditModeKeys, isCellExitEditModeKeys, isCellEditCommitKeys, isDeleteKeys } from '../../../utils/keyboardUtils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\n\nfunction isPromise(promise) {\n  return typeof promise.then === 'function';\n}\n\nexport const useCellEditing = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const setCellMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) === mode) {\n      return;\n    }\n\n    logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      newEditRowsState[id] = _extends({}, newEditRowsState[id]);\n\n      if (mode === GridCellModes.Edit) {\n        newEditRowsState[id][field] = {\n          value: apiRef.current.getCellValue(id, field)\n        };\n      } else {\n        delete newEditRowsState[id][field];\n\n        if (!Object.keys(newEditRowsState[id]).length) {\n          delete newEditRowsState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('cellModeChange', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const getCellMode = React.useCallback((id, field) => {\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editRowsState[id] && editRowsState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]); // TODO v6: it should always return a promise\n\n  const commitCellChange = React.useCallback((params, event = {}) => {\n    var _props$experimentalFe;\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    const model = apiRef.current.getEditRowsModel();\n\n    if (!model[id] || !model[id][field]) {\n      throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);\n    }\n\n    const editCellProps = model[id][field];\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const cellProps = model[id][field];\n\n      if (cellProps.isValidating || cellProps.error) {\n        return false;\n      }\n    }\n\n    const commitParams = _extends({}, params, {\n      value: editCellProps.value\n    });\n\n    let hasError = !!editCellProps.error;\n\n    if (!hasError && typeof column.preProcessEditCellProps === 'function') {\n      const result = column.preProcessEditCellProps({\n        id,\n        row,\n        props: editCellProps\n      });\n\n      if (isPromise(result)) {\n        return result.then(newEditCellProps => {\n          apiRef.current.unstable_setEditCellProps({\n            id,\n            field,\n            props: newEditCellProps\n          });\n\n          if (newEditCellProps.error) {\n            return false;\n          }\n\n          apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n          return true;\n        });\n      }\n\n      apiRef.current.unstable_setEditCellProps({\n        id,\n        field,\n        props: result\n      });\n      hasError = !!result.error;\n    }\n\n    if (!hasError) {\n      apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n      return true;\n    }\n\n    return false;\n  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setCellEditingEditCellValue = React.useCallback(params => {\n    const column = apiRef.current.getColumn(params.field);\n    const row = apiRef.current.getRow(params.id);\n    return new Promise(resolve => {\n      let newEditCellProps = {\n        value: params.value\n      };\n      const model = apiRef.current.getEditRowsModel();\n      const editCellProps = model[params.id][params.field];\n\n      if (typeof column.preProcessEditCellProps !== 'function') {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n        resolve(true);\n        return;\n      } // setEditCellProps runs the value parser and returns the updated props\n\n\n      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: _extends({}, editCellProps, {\n          isValidating: true\n        })\n      }));\n      Promise.resolve(column.preProcessEditCellProps({\n        id: params.id,\n        row,\n        props: _extends({}, newEditCellProps, {\n          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)\n        })\n      })).then(newEditCellPropsProcessed => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: _extends({}, newEditCellPropsProcessed, {\n            isValidating: false\n          })\n        }));\n        resolve(!newEditCellPropsProcessed.error);\n      });\n    });\n  }, [apiRef]);\n  const cellEditingApi = {\n    setCellMode,\n    getCellMode,\n    commitCellChange,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, cellEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    // Wait until IME is settled for Asian languages like Japanese and Chinese\n    // TODO: `event.which` is depricated but this is a temporary workaround\n    if (event.which === 229) {\n      return;\n    }\n\n    const {\n      id,\n      field,\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;\n\n    if (!isEditMode && isCellEnterEditModeKeys(event) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {\n      apiRef.current.publishEvent('cellEditStart', params, event);\n    }\n\n    if (!isEditMode && isDeleteKeys(event.key)) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      });\n      apiRef.current.commitCellChange({\n        id,\n        field\n      }, event);\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n\n    if (isEditMode && isCellEditCommitKeys(event.key)) {\n      const commitParams = {\n        id,\n        field\n      };\n      const isValid = await apiRef.current.commitCellChange(commitParams, event);\n\n      if (!isValid) {\n        return;\n      }\n    }\n\n    if (isEditMode && isCellExitEditModeKeys(event.key)) {\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellEditStart', params, event);\n  }, [apiRef]);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    await apiRef.current.commitCellChange(params, event);\n    apiRef.current.publishEvent('cellEditStop', params, event);\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  const handleCellEditStart = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);\n\n    if (isKeyboardEvent(event) && isPrintableKey(event)) {\n      apiRef.current.unstable_setEditCellProps({\n        id: params.id,\n        field: params.field,\n        props: {\n          value: ''\n        }\n      });\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback((params, event) => {\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);\n\n    if (!isKeyboardEvent(event)) {\n      return;\n    }\n\n    if (isCellEditCommitKeys(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n      return;\n    }\n\n    if (event.key === 'Escape' || isDeleteKeys(event.key)) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleCellEditCommit = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    const model = apiRef.current.getEditRowsModel();\n    const {\n      value\n    } = model[id][field];\n    logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      const column = apiRef.current.getColumn(params.field);\n\n      let rowUpdate = _extends({}, row, {\n        [field]: value\n      });\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          row,\n          value\n        });\n      }\n\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef, logger]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const column = apiRef.current.getColumn(params.field);\n    const editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({\n      id: params.id,\n      row,\n      props: params.props\n    }) : params.props;\n\n    if (isPromise(editCellProps)) {\n      editCellProps.then(newEditCellProps => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n      });\n    } else {\n      apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: editCellProps\n      }));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));\n  useGridApiEventHandler(apiRef, 'cellEditStart', buildCallback(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', buildCallback(handleCellEditStop));\n  useGridApiEventHandler(apiRef, 'cellEditCommit', buildCallback(handleCellEditCommit));\n  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));\n  useGridApiOptionHandler(apiRef, 'cellEditCommit', props.onCellEditCommit);\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n};"]},"metadata":{},"sourceType":"module"}