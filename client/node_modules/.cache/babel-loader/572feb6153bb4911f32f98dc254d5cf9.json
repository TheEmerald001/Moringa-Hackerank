{"ast":null,"code":"import { GridFilterInputSingleSelect } from '../components/panel/filterPanel/GridFilterInputSingleSelect';\nimport { GridFilterInputMultipleSingleSelect } from '../components/panel/filterPanel/GridFilterInputMultipleSingleSelect';\n\nconst parseObjectValue = value => {\n  if (value == null || typeof value !== 'object') {\n    return value;\n  }\n\n  return value.value;\n};\n\nexport const getGridSingleSelectQuickFilterFn = (value, column, apiRef) => {\n  if (!value) {\n    return null;\n  }\n\n  const {\n    valueOptions,\n    valueFormatter,\n    field\n  } = column;\n  const potentialValues = [parseObjectValue(value).toString()];\n  const iterableColumnValues = typeof valueOptions === 'function' ? valueOptions({\n    field\n  }) : valueOptions || [];\n\n  if (iterableColumnValues) {\n    iterableColumnValues.forEach(option => {\n      // for each valueOption, check if the formatted value\n      let optionValue;\n      let optionLabel;\n\n      if (typeof option === 'object') {\n        optionValue = option.value;\n        optionLabel = option.label;\n      } else {\n        optionValue = option;\n\n        if (valueFormatter) {\n          optionLabel = valueFormatter({\n            value: option,\n            field,\n            api: apiRef.current\n          });\n        } else {\n          optionLabel = option;\n        }\n      }\n\n      if (optionLabel.slice(0, value.length).toLowerCase() === value.toLowerCase()) {\n        if (!potentialValues.includes(optionValue)) {\n          potentialValues.push(optionValue.toString());\n        }\n      }\n    });\n  }\n\n  return ({\n    value: columnValue\n  }) => {\n    return columnValue != null ? potentialValues.includes(parseObjectValue(columnValue).toString()) : false;\n  };\n};\nexport const getGridSingleSelectOperators = () => [{\n  value: 'is',\n  getApplyFilterFn: filterItem => {\n    if (filterItem.value == null || filterItem.value === '') {\n      return null;\n    }\n\n    return ({\n      value\n    }) => parseObjectValue(value) === parseObjectValue(filterItem.value);\n  },\n  InputComponent: GridFilterInputSingleSelect\n}, {\n  value: 'not',\n  getApplyFilterFn: filterItem => {\n    if (filterItem.value == null || filterItem.value === '') {\n      return null;\n    }\n\n    return ({\n      value\n    }) => parseObjectValue(value) !== parseObjectValue(filterItem.value);\n  },\n  InputComponent: GridFilterInputSingleSelect\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n\n    const filterItemValues = filterItem.value.map(parseObjectValue);\n    return ({\n      value\n    }) => filterItemValues.includes(parseObjectValue(value));\n  },\n  InputComponent: GridFilterInputMultipleSingleSelect\n}];","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/colDef/gridSingleSelectOperators.js"],"names":["GridFilterInputSingleSelect","GridFilterInputMultipleSingleSelect","parseObjectValue","value","getGridSingleSelectQuickFilterFn","column","apiRef","valueOptions","valueFormatter","field","potentialValues","toString","iterableColumnValues","forEach","option","optionValue","optionLabel","label","api","current","slice","length","toLowerCase","includes","push","columnValue","getGridSingleSelectOperators","getApplyFilterFn","filterItem","InputComponent","Array","isArray","filterItemValues","map"],"mappings":"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","sourcesContent":["import { GridFilterInputSingleSelect } from '../components/panel/filterPanel/GridFilterInputSingleSelect';\nimport { GridFilterInputMultipleSingleSelect } from '../components/panel/filterPanel/GridFilterInputMultipleSingleSelect';\n\nconst parseObjectValue = value => {\n  if (value == null || typeof value !== 'object') {\n    return value;\n  }\n\n  return value.value;\n};\n\nexport const getGridSingleSelectQuickFilterFn = (value, column, apiRef) => {\n  if (!value) {\n    return null;\n  }\n\n  const {\n    valueOptions,\n    valueFormatter,\n    field\n  } = column;\n  const potentialValues = [parseObjectValue(value).toString()];\n  const iterableColumnValues = typeof valueOptions === 'function' ? valueOptions({\n    field\n  }) : valueOptions || [];\n\n  if (iterableColumnValues) {\n    iterableColumnValues.forEach(option => {\n      // for each valueOption, check if the formatted value\n      let optionValue;\n      let optionLabel;\n\n      if (typeof option === 'object') {\n        optionValue = option.value;\n        optionLabel = option.label;\n      } else {\n        optionValue = option;\n\n        if (valueFormatter) {\n          optionLabel = valueFormatter({\n            value: option,\n            field,\n            api: apiRef.current\n          });\n        } else {\n          optionLabel = option;\n        }\n      }\n\n      if (optionLabel.slice(0, value.length).toLowerCase() === value.toLowerCase()) {\n        if (!potentialValues.includes(optionValue)) {\n          potentialValues.push(optionValue.toString());\n        }\n      }\n    });\n  }\n\n  return ({\n    value: columnValue\n  }) => {\n    return columnValue != null ? potentialValues.includes(parseObjectValue(columnValue).toString()) : false;\n  };\n};\nexport const getGridSingleSelectOperators = () => [{\n  value: 'is',\n  getApplyFilterFn: filterItem => {\n    if (filterItem.value == null || filterItem.value === '') {\n      return null;\n    }\n\n    return ({\n      value\n    }) => parseObjectValue(value) === parseObjectValue(filterItem.value);\n  },\n  InputComponent: GridFilterInputSingleSelect\n}, {\n  value: 'not',\n  getApplyFilterFn: filterItem => {\n    if (filterItem.value == null || filterItem.value === '') {\n      return null;\n    }\n\n    return ({\n      value\n    }) => parseObjectValue(value) !== parseObjectValue(filterItem.value);\n  },\n  InputComponent: GridFilterInputSingleSelect\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n\n    const filterItemValues = filterItem.value.map(parseObjectValue);\n    return ({\n      value\n    }) => filterItemValues.includes(parseObjectValue(value));\n  },\n  InputComponent: GridFilterInputMultipleSingleSelect\n}];"]},"metadata":{},"sourceType":"module"}