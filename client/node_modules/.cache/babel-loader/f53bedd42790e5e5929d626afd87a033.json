{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"names":["_extends","React","ownerDocument","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","focusStateInitializer","state","focus","cell","columnHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","publishCellFocusOut","useCallback","event","current","getRow","id","publishEvent","getCellParams","field","setCellFocus","focusedCell","setState","debug","forceUpdate","setColumnHeaderFocus","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","rowIndexToFocus","getRowIndexRelativeToVisibleRows","visibleColumns","currentPage","pagination","paginationMode","length","rows","rowToFocus","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","handleBlur","handleCellMouseDown","handleDocumentClick","cellParams","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","unstable_moveFocusToRelativeCell","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { ownerDocument } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  useGridApiMethod(apiRef, {\n    setCellFocus,\n    setColumnHeaderFocus,\n    unstable_moveFocusToRelativeCell: moveFocusToRelativeCell\n  }, 'GridFocusApi');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('click', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('click', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};"]},"metadata":{},"sourceType":"module"}