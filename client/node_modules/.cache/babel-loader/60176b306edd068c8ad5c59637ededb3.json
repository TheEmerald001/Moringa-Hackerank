{"ast":null,"code":"import * as React from 'react';\nimport { useFirstRender } from '../../utils/useFirstRender';\nexport const useGridRegisterStrategyProcessor = (apiRef, strategyName, group, processor) => {\n  const registerPreProcessor = React.useCallback(() => {\n    apiRef.current.unstable_registerStrategyProcessor(strategyName, group, processor);\n  }, [apiRef, processor, group, strategyName]);\n  useFirstRender(() => {\n    registerPreProcessor();\n  });\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      registerPreProcessor();\n    }\n  }, [registerPreProcessor]);\n};","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js"],"names":["React","useFirstRender","useGridRegisterStrategyProcessor","apiRef","strategyName","group","processor","registerPreProcessor","useCallback","current","unstable_registerStrategyProcessor","isFirstRender","useRef","useEffect"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,OAAO,MAAMC,gCAAgC,GAAG,CAACC,MAAD,EAASC,YAAT,EAAuBC,KAAvB,EAA8BC,SAA9B,KAA4C;AAC1F,QAAMC,oBAAoB,GAAGP,KAAK,CAACQ,WAAN,CAAkB,MAAM;AACnDL,IAAAA,MAAM,CAACM,OAAP,CAAeC,kCAAf,CAAkDN,YAAlD,EAAgEC,KAAhE,EAAuEC,SAAvE;AACD,GAF4B,EAE1B,CAACH,MAAD,EAASG,SAAT,EAAoBD,KAApB,EAA2BD,YAA3B,CAF0B,CAA7B;AAGAH,EAAAA,cAAc,CAAC,MAAM;AACnBM,IAAAA,oBAAoB;AACrB,GAFa,CAAd;AAGA,QAAMI,aAAa,GAAGX,KAAK,CAACY,MAAN,CAAa,IAAb,CAAtB;AACAZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpB,QAAIF,aAAa,CAACF,OAAlB,EAA2B;AACzBE,MAAAA,aAAa,CAACF,OAAd,GAAwB,KAAxB;AACD,KAFD,MAEO;AACLF,MAAAA,oBAAoB;AACrB;AACF,GAND,EAMG,CAACA,oBAAD,CANH;AAOD,CAfM","sourcesContent":["import * as React from 'react';\nimport { useFirstRender } from '../../utils/useFirstRender';\nexport const useGridRegisterStrategyProcessor = (apiRef, strategyName, group, processor) => {\n  const registerPreProcessor = React.useCallback(() => {\n    apiRef.current.unstable_registerStrategyProcessor(strategyName, group, processor);\n  }, [apiRef, processor, group, strategyName]);\n  useFirstRender(() => {\n    registerPreProcessor();\n  });\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      registerPreProcessor();\n    }\n  }, [registerPreProcessor]);\n};"]},"metadata":{},"sourceType":"module"}