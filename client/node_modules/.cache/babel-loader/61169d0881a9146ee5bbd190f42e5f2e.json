{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"color\", \"error\", \"helperText\", \"size\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport Chip from '@mui/material/Chip';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { getValueFromOption } from './filterPanelUtils';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst isOptionEqualToValue = (option, value) => getValueFromOption(option) === getValueFromOption(value);\n\nconst filter = createFilterOptions();\n\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n    item,\n    applyValue,\n    apiRef,\n    focusElementRef,\n    color,\n    error,\n    helperText,\n    size,\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const TextFieldProps = {\n    color,\n    error,\n    helperText,\n    size,\n    variant\n  };\n  const id = useId();\n  const rootProps = useGridRootProps();\n  const resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  const resolvedValueOptions = React.useMemo(() => {\n    if (!(resolvedColumn != null && resolvedColumn.valueOptions)) {\n      return [];\n    }\n\n    if (typeof resolvedColumn.valueOptions === 'function') {\n      return resolvedColumn.valueOptions({\n        field: resolvedColumn.field\n      });\n    }\n\n    return resolvedColumn.valueOptions;\n  }, [resolvedColumn]);\n  const resolvedFormattedValueOptions = React.useMemo(() => {\n    return resolvedValueOptions == null ? void 0 : resolvedValueOptions.map(getValueFromOption);\n  }, [resolvedValueOptions]);\n  const {\n    valueFormatter,\n    field\n  } = apiRef.current.getColumn(item.columnField);\n\n  const filterValueOptionFormatter = option => {\n    if (typeof option === 'object') {\n      return option.label;\n    }\n\n    return valueFormatter && option !== '' ? valueFormatter({\n      value: option,\n      field,\n      api: apiRef.current\n    }) : option;\n  }; // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n\n\n  const filterValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n\n    if (resolvedValueOptions !== undefined) {\n      const itemValueIndexes = item.value.map(element => {\n        // get the index matching between values and valueOptions\n        const formattedElement = getValueFromOption(element);\n        const index = (resolvedFormattedValueOptions == null ? void 0 : resolvedFormattedValueOptions.findIndex(formatedOption => formatedOption === formattedElement)) || 0;\n        return index;\n      });\n      return itemValueIndexes.filter(index => index >= 0).map(index => resolvedValueOptions[index]);\n    }\n\n    return item.value;\n  }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);\n  React.useEffect(() => {\n    if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {\n      // update the state if the filter value has been cleaned by the component\n      applyValue(_extends({}, item, {\n        value: filterValues.map(getValueFromOption)\n      }));\n    }\n  }, [item, filterValues, applyValue]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: [...value.map(getValueFromOption)]\n    }));\n  }, [applyValue, item]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    limitTags: 1,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filterValues,\n    onChange: handleChange,\n    renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n      variant: \"outlined\",\n      size: \"small\",\n      label: filterValueOptionFormatter(option)\n    }, getTagProps({\n      index\n    })))),\n    renderInput: params => {\n      var _rootProps$components;\n\n      return /*#__PURE__*/_jsx(rootProps.components.BaseTextField, _extends({}, params, {\n        label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n        placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n        InputLabelProps: _extends({}, params.InputLabelProps, {\n          shrink: true\n        }),\n        inputRef: focusElementRef,\n        type: \"singleSelect\"\n      }, TextFieldProps, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));\n    }\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","Autocomplete","createFilterOptions","Chip","unstable_useId","useId","getValueFromOption","useGridRootProps","jsx","_jsx","isOptionEqualToValue","option","value","filter","GridFilterInputMultipleSingleSelect","props","item","applyValue","apiRef","focusElementRef","color","error","helperText","size","variant","other","TextFieldProps","id","rootProps","resolvedColumn","columnField","current","getColumn","resolvedValueOptions","useMemo","valueOptions","field","resolvedFormattedValueOptions","map","valueFormatter","filterValueOptionFormatter","label","api","filterValues","Array","isArray","undefined","itemValueIndexes","element","formattedElement","index","findIndex","formatedOption","useEffect","length","handleChange","useCallback","event","multiple","limitTags","options","filterOptions","onChange","renderTags","getTagProps","renderInput","params","_rootProps$components","components","BaseTextField","getLocaleText","placeholder","InputLabelProps","shrink","inputRef","type","componentsProps","baseTextField","process","env","NODE_ENV","propTypes","shape","object","isRequired","func","oneOfType","string","number","operatorValue","any","oneOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"color\", \"error\", \"helperText\", \"size\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport Chip from '@mui/material/Chip';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { getValueFromOption } from './filterPanelUtils';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst isOptionEqualToValue = (option, value) => getValueFromOption(option) === getValueFromOption(value);\n\nconst filter = createFilterOptions();\n\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n    item,\n    applyValue,\n    apiRef,\n    focusElementRef,\n    color,\n    error,\n    helperText,\n    size,\n    variant = 'standard'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const TextFieldProps = {\n    color,\n    error,\n    helperText,\n    size,\n    variant\n  };\n  const id = useId();\n  const rootProps = useGridRootProps();\n  const resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  const resolvedValueOptions = React.useMemo(() => {\n    if (!(resolvedColumn != null && resolvedColumn.valueOptions)) {\n      return [];\n    }\n\n    if (typeof resolvedColumn.valueOptions === 'function') {\n      return resolvedColumn.valueOptions({\n        field: resolvedColumn.field\n      });\n    }\n\n    return resolvedColumn.valueOptions;\n  }, [resolvedColumn]);\n  const resolvedFormattedValueOptions = React.useMemo(() => {\n    return resolvedValueOptions == null ? void 0 : resolvedValueOptions.map(getValueFromOption);\n  }, [resolvedValueOptions]);\n  const {\n    valueFormatter,\n    field\n  } = apiRef.current.getColumn(item.columnField);\n\n  const filterValueOptionFormatter = option => {\n    if (typeof option === 'object') {\n      return option.label;\n    }\n\n    return valueFormatter && option !== '' ? valueFormatter({\n      value: option,\n      field,\n      api: apiRef.current\n    }) : option;\n  }; // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n\n\n  const filterValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n\n    if (resolvedValueOptions !== undefined) {\n      const itemValueIndexes = item.value.map(element => {\n        // get the index matching between values and valueOptions\n        const formattedElement = getValueFromOption(element);\n        const index = (resolvedFormattedValueOptions == null ? void 0 : resolvedFormattedValueOptions.findIndex(formatedOption => formatedOption === formattedElement)) || 0;\n        return index;\n      });\n      return itemValueIndexes.filter(index => index >= 0).map(index => resolvedValueOptions[index]);\n    }\n\n    return item.value;\n  }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);\n  React.useEffect(() => {\n    if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {\n      // update the state if the filter value has been cleaned by the component\n      applyValue(_extends({}, item, {\n        value: filterValues.map(getValueFromOption)\n      }));\n    }\n  }, [item, filterValues, applyValue]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: [...value.map(getValueFromOption)]\n    }));\n  }, [applyValue, item]);\n  return /*#__PURE__*/_jsx(Autocomplete, _extends({\n    multiple: true,\n    limitTags: 1,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    filterOptions: filter,\n    id: id,\n    value: filterValues,\n    onChange: handleChange,\n    renderTags: (value, getTagProps) => value.map((option, index) => /*#__PURE__*/_jsx(Chip, _extends({\n      variant: \"outlined\",\n      size: \"small\",\n      label: filterValueOptionFormatter(option)\n    }, getTagProps({\n      index\n    })))),\n    renderInput: params => {\n      var _rootProps$components;\n\n      return /*#__PURE__*/_jsx(rootProps.components.BaseTextField, _extends({}, params, {\n        label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n        placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n        InputLabelProps: _extends({}, params.InputLabelProps, {\n          shrink: true\n        }),\n        inputRef: focusElementRef,\n        type: \"singleSelect\"\n      }, TextFieldProps, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));\n    }\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };"]},"metadata":{},"sourceType":"module"}