{"ast":null,"code":"import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\n\nconst serializeCellValue = (value, delimiterCharacter) => {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"'); // Make sure value containing delimiter or line break won't be split into multiple rows\n\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return `\"${formattedValue}\"`;\n    }\n\n    return formattedValue;\n  }\n\n  return value;\n};\n\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n\nconst serializeRow = (id, columns, getCellParams, delimiterCharacter) => columns.map(column => {\n  const cellParams = getCellParams(id, column.field);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (String(cellParams.formattedValue) === '[object Object]') {\n      objectFormattedValueWarning();\n    }\n  }\n\n  return serializeCellValue(cellParams.formattedValue, delimiterCharacter);\n});\n\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter)}\\r\\n`, '').trim();\n\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n\n  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => serializeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js"],"names":["GRID_CHECKBOX_SELECTION_COL_DEF","buildWarning","serializeCellValue","value","delimiterCharacter","formattedValue","replace","some","delimiter","includes","objectFormattedValueWarning","serializeRow","id","columns","getCellParams","map","column","cellParams","field","process","env","NODE_ENV","String","buildCSV","options","rowIds","includeHeaders","CSVBody","reduce","acc","join","trim","CSVHead","filter","headerName"],"mappings":"AAAA,SAASA,+BAAT,QAAgD,oBAAhD;AACA,SAASC,YAAT,QAA6B,2BAA7B;;AAEA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,kBAAR,KAA+B;AACxD,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAME,cAAc,GAAGF,KAAK,CAACG,OAAN,CAAc,IAAd,EAAoB,IAApB,CAAvB,CAD6B,CACqB;;AAElD,QAAI,CAACF,kBAAD,EAAqB,IAArB,EAA2B,IAA3B,EAAiCG,IAAjC,CAAsCC,SAAS,IAAIH,cAAc,CAACI,QAAf,CAAwBD,SAAxB,CAAnD,CAAJ,EAA4F;AAC1F,aAAQ,IAAGH,cAAe,GAA1B;AACD;;AAED,WAAOA,cAAP;AACD;;AAED,SAAOF,KAAP;AACD,CAZD;;AAcA,MAAMO,2BAA2B,GAAGT,YAAY,CAAC,CAAC,kIAAD,EAAqI,6EAArI,CAAD,CAAhD;;AAEA,MAAMU,YAAY,GAAG,CAACC,EAAD,EAAKC,OAAL,EAAcC,aAAd,EAA6BV,kBAA7B,KAAoDS,OAAO,CAACE,GAAR,CAAYC,MAAM,IAAI;AAC7F,QAAMC,UAAU,GAAGH,aAAa,CAACF,EAAD,EAAKI,MAAM,CAACE,KAAZ,CAAhC;;AAEA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAIC,MAAM,CAACL,UAAU,CAACZ,cAAZ,CAAN,KAAsC,iBAA1C,EAA6D;AAC3DK,MAAAA,2BAA2B;AAC5B;AACF;;AAED,SAAOR,kBAAkB,CAACe,UAAU,CAACZ,cAAZ,EAA4BD,kBAA5B,CAAzB;AACD,CAVwE,CAAzE;;AAYA,OAAO,SAASmB,QAAT,CAAkBC,OAAlB,EAA2B;AAChC,QAAM;AACJX,IAAAA,OADI;AAEJY,IAAAA,MAFI;AAGJX,IAAAA,aAHI;AAIJV,IAAAA,kBAJI;AAKJsB,IAAAA;AALI,MAMFF,OANJ;AAOA,QAAMG,OAAO,GAAGF,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMjB,EAAN,KAAc,GAAEiB,GAAI,GAAElB,YAAY,CAACC,EAAD,EAAKC,OAAL,EAAcC,aAAd,EAA6BV,kBAA7B,CAAZ,CAA6D0B,IAA7D,CAAkE1B,kBAAlE,CAAsF,MAA1H,EAAiI,EAAjI,EAAqI2B,IAArI,EAAhB;;AAEA,MAAI,CAACL,cAAL,EAAqB;AACnB,WAAOC,OAAP;AACD;;AAED,QAAMK,OAAO,GAAI,GAAEnB,OAAO,CAACoB,MAAR,CAAejB,MAAM,IAAIA,MAAM,CAACE,KAAP,KAAiBlB,+BAA+B,CAACkB,KAA1E,EAAiFH,GAAjF,CAAqFC,MAAM,IAAId,kBAAkB,CAACc,MAAM,CAACkB,UAAP,IAAqBlB,MAAM,CAACE,KAA7B,EAAoCd,kBAApC,CAAjH,EAA0K0B,IAA1K,CAA+K1B,kBAA/K,CAAmM,MAAtN;AACA,SAAQ,GAAE4B,OAAQ,GAAEL,OAAQ,EAArB,CAAuBI,IAAvB,EAAP;AACD","sourcesContent":["import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\n\nconst serializeCellValue = (value, delimiterCharacter) => {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"'); // Make sure value containing delimiter or line break won't be split into multiple rows\n\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return `\"${formattedValue}\"`;\n    }\n\n    return formattedValue;\n  }\n\n  return value;\n};\n\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n\nconst serializeRow = (id, columns, getCellParams, delimiterCharacter) => columns.map(column => {\n  const cellParams = getCellParams(id, column.field);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (String(cellParams.formattedValue) === '[object Object]') {\n      objectFormattedValueWarning();\n    }\n  }\n\n  return serializeCellValue(cellParams.formattedValue, delimiterCharacter);\n});\n\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter)}\\r\\n`, '').trim();\n\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n\n  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => serializeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}"]},"metadata":{},"sourceType":"module"}