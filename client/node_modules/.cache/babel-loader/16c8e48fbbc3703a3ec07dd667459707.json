{"ast":null,"code":"import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nconst flatRowTreeCreationMethod = ({\n  ids,\n  idRowsLookup,\n  idToIdLookup,\n  previousTree\n}) => {\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId] && previousTree[rowId].depth === 0 && previousTree[rowId].parent == null && // pinned row can be unpinned\n    !previousTree[rowId].isPinned) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};","map":{"version":3,"sources":["/home/shaki/phase-5-project/Moringa-Hackerank1/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js"],"names":["GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","flatRowTreeCreationMethod","ids","idRowsLookup","idToIdLookup","previousTree","tree","i","length","rowId","depth","parent","isPinned","id","groupingKey","groupingField","groupingName","treeDepth","useGridRowsPreProcessors","apiRef"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,gCAAhC,QAAwE,+BAAxE;;AAEA,MAAMC,yBAAyB,GAAG,CAAC;AACjCC,EAAAA,GADiC;AAEjCC,EAAAA,YAFiC;AAGjCC,EAAAA,YAHiC;AAIjCC,EAAAA;AAJiC,CAAD,KAK5B;AACJ,QAAMC,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACM,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtC,UAAME,KAAK,GAAGP,GAAG,CAACK,CAAD,CAAjB;;AAEA,QAAIF,YAAY,IAAIA,YAAY,CAACI,KAAD,CAA5B,IAAuCJ,YAAY,CAACI,KAAD,CAAZ,CAAoBC,KAApB,KAA8B,CAArE,IAA0EL,YAAY,CAACI,KAAD,CAAZ,CAAoBE,MAApB,IAA8B,IAAxG,IAAgH;AACpH,KAACN,YAAY,CAACI,KAAD,CAAZ,CAAoBG,QADrB,EAC+B;AAC7BN,MAAAA,IAAI,CAACG,KAAD,CAAJ,GAAcJ,YAAY,CAACI,KAAD,CAA1B;AACD,KAHD,MAGO;AACLH,MAAAA,IAAI,CAACG,KAAD,CAAJ,GAAc;AACZI,QAAAA,EAAE,EAAEJ,KADQ;AAEZC,QAAAA,KAAK,EAAE,CAFK;AAGZC,QAAAA,MAAM,EAAE,IAHI;AAIZG,QAAAA,WAAW,EAAE,EAJD;AAKZC,QAAAA,aAAa,EAAE;AALH,OAAd;AAOD;AACF;;AAED,SAAO;AACLC,IAAAA,YAAY,EAAEjB,qBADT;AAELO,IAAAA,IAFK;AAGLW,IAAAA,SAAS,EAAE,CAHN;AAILd,IAAAA,YAJK;AAKLC,IAAAA,YALK;AAMLF,IAAAA;AANK,GAAP;AAQD,CAjCD;;AAmCA,OAAO,MAAMgB,wBAAwB,GAAGC,MAAM,IAAI;AAChDnB,EAAAA,gCAAgC,CAACmB,MAAD,EAASpB,qBAAT,EAAgC,iBAAhC,EAAmDE,yBAAnD,CAAhC;AACD,CAFM","sourcesContent":["import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nconst flatRowTreeCreationMethod = ({\n  ids,\n  idRowsLookup,\n  idToIdLookup,\n  previousTree\n}) => {\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId] && previousTree[rowId].depth === 0 && previousTree[rowId].parent == null && // pinned row can be unpinned\n    !previousTree[rowId].isPinned) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};"]},"metadata":{},"sourceType":"module"}