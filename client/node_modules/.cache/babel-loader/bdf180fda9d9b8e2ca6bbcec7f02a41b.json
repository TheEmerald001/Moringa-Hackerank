{"ast":null,"code":"import { GridFilterInputDate } from '../components/panel/filterPanel/GridFilterInputDate';\nconst dateRegex = /(\\d+)-(\\d+)-(\\d+)/;\nconst dateTimeRegex = /(\\d+)-(\\d+)-(\\d+)T(\\d+):(\\d+)/;\n\nfunction buildApplyFilterFn(filterItem, compareFn, showTime, keepHours) {\n  if (!filterItem.value) {\n    return null;\n  }\n\n  const [year, month, day, hour, minute] = filterItem.value.match(showTime ? dateTimeRegex : dateRegex).slice(1).map(Number);\n  const time = new Date(year, month - 1, day, hour || 0, minute || 0).getTime();\n  return ({\n    value\n  }) => {\n    if (!value) {\n      return false;\n    }\n\n    const valueAsDate = value instanceof Date ? value : new Date(value.toString());\n\n    if (keepHours) {\n      return compareFn(valueAsDate.getTime(), time);\n    } // Make a copy of the date to not reset the hours in the original object\n\n\n    const dateCopy = value instanceof Date ? new Date(valueAsDate) : valueAsDate;\n    const timeToCompare = dateCopy.setHours(showTime ? valueAsDate.getHours() : 0, showTime ? valueAsDate.getMinutes() : 0, 0, 0);\n    return compareFn(timeToCompare, time);\n  };\n}\n\nexport const getGridDateOperators = showTime => [{\n  value: 'is',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 === value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'not',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 !== value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'after',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 > value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'onOrAfter',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 >= value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'before',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 < value2, showTime, !showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'onOrBefore',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 <= value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'isEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value == null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isNotEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value != null;\n    };\n  },\n  requiresFilterValue: false\n}];","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/x-data-grid/colDef/gridDateOperators.js"],"names":["GridFilterInputDate","dateRegex","dateTimeRegex","buildApplyFilterFn","filterItem","compareFn","showTime","keepHours","value","year","month","day","hour","minute","match","slice","map","Number","time","Date","getTime","valueAsDate","toString","dateCopy","timeToCompare","setHours","getHours","getMinutes","getGridDateOperators","getApplyFilterFn","value1","value2","InputComponent","InputComponentProps","type","requiresFilterValue"],"mappings":"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","sourcesContent":["import { GridFilterInputDate } from '../components/panel/filterPanel/GridFilterInputDate';\nconst dateRegex = /(\\d+)-(\\d+)-(\\d+)/;\nconst dateTimeRegex = /(\\d+)-(\\d+)-(\\d+)T(\\d+):(\\d+)/;\n\nfunction buildApplyFilterFn(filterItem, compareFn, showTime, keepHours) {\n  if (!filterItem.value) {\n    return null;\n  }\n\n  const [year, month, day, hour, minute] = filterItem.value.match(showTime ? dateTimeRegex : dateRegex).slice(1).map(Number);\n  const time = new Date(year, month - 1, day, hour || 0, minute || 0).getTime();\n  return ({\n    value\n  }) => {\n    if (!value) {\n      return false;\n    }\n\n    const valueAsDate = value instanceof Date ? value : new Date(value.toString());\n\n    if (keepHours) {\n      return compareFn(valueAsDate.getTime(), time);\n    } // Make a copy of the date to not reset the hours in the original object\n\n\n    const dateCopy = value instanceof Date ? new Date(valueAsDate) : valueAsDate;\n    const timeToCompare = dateCopy.setHours(showTime ? valueAsDate.getHours() : 0, showTime ? valueAsDate.getMinutes() : 0, 0, 0);\n    return compareFn(timeToCompare, time);\n  };\n}\n\nexport const getGridDateOperators = showTime => [{\n  value: 'is',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 === value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'not',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 !== value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'after',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 > value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'onOrAfter',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 >= value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'before',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 < value2, showTime, !showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'onOrBefore',\n  getApplyFilterFn: filterItem => {\n    return buildApplyFilterFn(filterItem, (value1, value2) => value1 <= value2, showTime);\n  },\n  InputComponent: GridFilterInputDate,\n  InputComponentProps: {\n    type: showTime ? 'datetime-local' : 'date'\n  }\n}, {\n  value: 'isEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value == null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isNotEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value != null;\n    };\n  },\n  requiresFilterValue: false\n}];"]},"metadata":{},"sourceType":"module"}