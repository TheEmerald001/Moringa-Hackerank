{"ast":null,"code":"import { unstable_capitalize as capitalize } from '@mui/utils';\nimport responsivePropType from './responsivePropType';\nimport { handleBreakpoints } from './breakpoints';\nexport function getPath(obj, path, checkVars = true) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  } // Check if CSS variables are used\n\n\n  if (obj && obj.vars && checkVars) {\n    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);\n\n    if (val != null) {\n      return val;\n    }\n  }\n\n  return path.split('.').reduce((acc, item) => {\n    if (acc && acc[item] != null) {\n      return acc[item];\n    }\n\n    return null;\n  }, obj);\n}\n\nfunction getValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {\n  let value;\n\n  if (typeof themeMapping === 'function') {\n    value = themeMapping(propValueFinal);\n  } else if (Array.isArray(themeMapping)) {\n    value = themeMapping[propValueFinal] || userValue;\n  } else {\n    value = getPath(themeMapping, propValueFinal) || userValue;\n  }\n\n  if (transform) {\n    value = transform(value, userValue);\n  }\n\n  return value;\n}\n\nfunction style(options) {\n  const {\n    prop,\n    cssProperty = options.prop,\n    themeKey,\n    transform\n  } = options;\n\n  const fn = props => {\n    if (props[prop] == null) {\n      return null;\n    }\n\n    const propValue = props[prop];\n    const theme = props.theme;\n    const themeMapping = getPath(theme, themeKey) || {};\n\n    const styleFromPropValue = propValueFinal => {\n      let value = getValue(themeMapping, transform, propValueFinal);\n\n      if (propValueFinal === value && typeof propValueFinal === 'string') {\n        // Haven't found value\n        value = getValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);\n      }\n\n      if (cssProperty === false) {\n        return value;\n      }\n\n      return {\n        [cssProperty]: value\n      };\n    };\n\n    return handleBreakpoints(props, propValue, styleFromPropValue);\n  };\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? {\n    [prop]: responsivePropType\n  } : {};\n  fn.filterProps = [prop];\n  return fn;\n}\n\nexport default style;","map":{"version":3,"sources":["/home/moryno/Development/Project/Final-Project/Moringa-Hackerank/client/node_modules/@mui/system/esm/style.js"],"names":["unstable_capitalize","capitalize","responsivePropType","handleBreakpoints","getPath","obj","path","checkVars","vars","val","split","reduce","acc","item","getValue","themeMapping","transform","propValueFinal","userValue","value","Array","isArray","style","options","prop","cssProperty","themeKey","fn","props","propValue","theme","styleFromPropValue","propTypes","process","env","NODE_ENV","filterProps"],"mappings":"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","sourcesContent":["import { unstable_capitalize as capitalize } from '@mui/utils';\nimport responsivePropType from './responsivePropType';\nimport { handleBreakpoints } from './breakpoints';\nexport function getPath(obj, path, checkVars = true) {\n  if (!path || typeof path !== 'string') {\n    return null;\n  } // Check if CSS variables are used\n\n\n  if (obj && obj.vars && checkVars) {\n    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);\n\n    if (val != null) {\n      return val;\n    }\n  }\n\n  return path.split('.').reduce((acc, item) => {\n    if (acc && acc[item] != null) {\n      return acc[item];\n    }\n\n    return null;\n  }, obj);\n}\n\nfunction getValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {\n  let value;\n\n  if (typeof themeMapping === 'function') {\n    value = themeMapping(propValueFinal);\n  } else if (Array.isArray(themeMapping)) {\n    value = themeMapping[propValueFinal] || userValue;\n  } else {\n    value = getPath(themeMapping, propValueFinal) || userValue;\n  }\n\n  if (transform) {\n    value = transform(value, userValue);\n  }\n\n  return value;\n}\n\nfunction style(options) {\n  const {\n    prop,\n    cssProperty = options.prop,\n    themeKey,\n    transform\n  } = options;\n\n  const fn = props => {\n    if (props[prop] == null) {\n      return null;\n    }\n\n    const propValue = props[prop];\n    const theme = props.theme;\n    const themeMapping = getPath(theme, themeKey) || {};\n\n    const styleFromPropValue = propValueFinal => {\n      let value = getValue(themeMapping, transform, propValueFinal);\n\n      if (propValueFinal === value && typeof propValueFinal === 'string') {\n        // Haven't found value\n        value = getValue(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);\n      }\n\n      if (cssProperty === false) {\n        return value;\n      }\n\n      return {\n        [cssProperty]: value\n      };\n    };\n\n    return handleBreakpoints(props, propValue, styleFromPropValue);\n  };\n\n  fn.propTypes = process.env.NODE_ENV !== 'production' ? {\n    [prop]: responsivePropType\n  } : {};\n  fn.filterProps = [prop];\n  return fn;\n}\n\nexport default style;"]},"metadata":{},"sourceType":"module"}